#2557번 Hello World!를 출력하시오.
import time

print("Hello World!")

array = ['H','e','l','l','o',' ','W','o','r','l','d','!']
for i in array:
    print(i,end='') #배열로 지정하여 원소를 출력, 끝에 줄바꿈 삭제를 위해서 end='' 삽입


# 10718번 두 줄에 걸쳐 "강한친구 대한육군"을 한 줄에 한 번씩 출력한다.

print("강한친구 대한육군\n강한친구 대한육군")
print("강한친구 대한육군\n"*2) #\n 줄바꿈, 전체 str에 *2 하면 두 번 출력
for i in range(2):
    print("강한친구 대한육군") #동일 구문을 for문으로 두 번 출력


# 10171번 고양이를 출력한다.
# \    /\
#  )  ( ')
# (  /  )
#  \(__)|

# \가 들어가 있으므로 \\으로 이중 처리
print("""\    /\\ 
 )  ( ')
(  /  )
 \(__)|""")
print("""\    /\\\n )  ( ')\n(  /  )\n \(__)|""")


# 10172번 개를 출력한다.
# |\_/|
# |q p|   /}
# ( 0 )"""\
# |"^"`    |
# ||_/=\\__|

#"""이 들어가 있으므로 구문 출력 시 ''' 으로 묶기, \가 들어가 있으므로 \\으로 이중 처리
print('''|\_/|
|q p|   /}
( 0 )"""\\
|"^"`    |
||_/=\\\\__|''')
print('''|\_/|\n|q p|   /}\n( 0 )"""\\\n|"^"`    |\n||_/=\\\\__|''')


# 1000번 첫째 줄에 A와 B가 주어진다. (0 < A, B < 10), 첫째 줄에 A+B를 출력한다.

a = input().split() #입력한 데이터를 split하여 list 형으로 저장
b = 0 #b 초기화
for i in a: #a의 원소에 대해서 합산 진행
    b=b+int(i) #i는 str형으로 저장되므로 int형으로 전환하여 합산 진행
print(b)

a, b = map(int,input().split()) #int형으로 데이터를 split하여 저장
print(a+b)


# 1001번 첫째 줄에 A와 B가 주어진다. (0 < A, B < 10), 첫째 줄에 A-B를 출력한다.

a = input().split() #입력한 데이터를 split하여 list 형으로 저장
b = int(a[0])-int(a[1]) #0번 원소와 1번 원소를 각각 int 형으로 불러와서 계산
print(b)

a, b = map(int,input().split()) #int형으로 데이터를 split하여 저장
print(a-b)


# 10998번 첫째 줄에 A와 B가 주어진다. (0 < A, B < 10), 첫째 줄에 A×B를 출력한다.

a = input().split() #입력한 데이터를 split하여 list 형으로 저장
print(int(a[0])*int(a[1])) #0번 원소와 1번 원소를 각각 int 형으로 불러와서 계산

a, b = map(int,input().split()) #int형으로 데이터를 split하여 저장
print(a*b)


# 1008번 첫째 줄에 A와 B가 주어진다. (0 < A, B < 10), 첫째 줄에 A/B를 출력한다. 실제 정답과 출력값의 절대오차 또는 상대오차가 10-9 이하이면 정답이다.

a = input().split()
print(int(a[0])/int(a[1]))

a,b=map(int,input().split())
print(a/b)


# 10869번 두 자연수 A와 B가 주어진다. (1 ≤ A, B ≤ 10,000), 첫째 줄에 A+B, 둘째 줄에 A-B, 셋째 줄에 A*B, 넷째 줄에 A/B, 다섯째 줄에 A%B를 출력한다.

a = input().split()
b, c = int(a[0]), int(a[1])
print(f"""{b+c}\n{b-c}\n{b*c}\n{b//c}\n{b%c}""") #print(f"""""")로 한 번에 출력


# 10926번 첫째 줄에 준하가 가입하려고 하는 사이트에 이미 존재하는 아이디가 주어진다. 아이디는 알파벳 소문자로만 이루어져 있으며, 길이는 50자를 넘지 않는다.,첫째 줄에 준하의 놀람을 출력한다. 놀람은 아이디 뒤에 ??!를 붙여서 나타낸다.

print(input()+"??!") #print 문에 바로 input을 넣어서 출력


# 18108번
# 서기 연도를 알아보고 싶은 불기 연도 y가 주어진다. (1000 ≤ y ≤ 3000), 불기 연도를 서기 연도로 변환한 결과를 출력한다.

print(int(input())-543)


# 10430번
# 첫째 줄에 A, B, C가 순서대로 주어진다. (2 ≤ A, B, C ≤ 10000), 첫째 줄에 (A+B)%C, 둘째 줄에 ((A%C) + (B%C))%C, 셋째 줄에 (A×B)%C, 넷째 줄에 ((A%C) × (B%C))%C를 출력한다.

a=input().split() #list 형 저장
A,B,C=int(a[0]),int(a[1]),int(a[2])
print(f"""{(A+B)%C}\n{(A%C+B%C)%C}\n{(A*B)%C}\n{((A%C)*(B%C))%C}""")

a,b,c=input().split() #각각에 저장
A,B,C=int(a),int(b),int(c)
print(f"""{(A+B)%C}\n{(A%C+B%C)%C}\n{(A*B)%C}\n{((A%C)*(B%C))%C}""")


# 2588번
# (세 자리 수) × (세 자리 수)는 다음과 같은 과정을 통하여 이루어진다.

a=int(input())
b=int(input())
c,d,e=a*(b%10),a*(b//10%10),a*(b//100%10)
print(f"""{c}\n{d}\n{e}\n{a*b}""")

a=int(input())
b=int(input())
for i in range(3): #똑같은 형식이므로 for 문 사용해서 수식화
    print(a*(b//10**i%10))
print(a*b)


# 1330번
# 첫째 줄에 A와 B가 주어진다. A와 B는 공백 한 칸으로 구분되어져 있다.
# 첫째 줄에 다음 세 가지 중 하나를 출력한다.
# A가 B보다 큰 경우에는 '>'를 출력한다.
# # A가 B보다 작은 경우에는 '<'를 출력한다.
# # A와 B가 같은 경우에는 '=='를 출력한다.
#
a,b=input().split()
a,b=int(a),int(b)
if a>b:
    print(">")
elif a<b:
    print("<")
else:
    print("==")

sqrt=lambda x:x**0.5
print(sqrt(25))


# 9498번
# 시험 점수를 입력받아 90 ~ 100점은 A, 80 ~ 89점은 B, 70 ~ 79점은 C, 60 ~ 69점은 D, 나머지 점수는 F를 출력하는 프로그램을 작성하시오.

a=int(input())
if a>= 90:
    print("A")
elif a>=80:
    print("B")
elif a>=70:
    print("C")
elif a>=60:
    print("D")
else:
    print("F")

print('FFFFFFDCBAA'[int(input())//10]) #문자열 형태로 저장하고 점수에 따라서 숫자를 나눠서 출력


# 2753번 첫째 줄에 연도가 주어진다. 연도는 1보다 크거나 같고, 4000보다 작거나 같은 자연수이다. 첫째 줄에 윤년이면 1, 아니면 0을 출력한다.
# 윤년은 연도가 4의 배수이면서, 100의 배수가 아닐 때 또는 400의 배수일 때이다.

a=int(input())
if a%400==0 or (a%4==0 and a%100!=0):
    print(1)
else:
    print(0)

a=int(input())
print((a%100or a//100)%4<1)

# True or False
print(1 or True) #==1
print(True or 1) #==True
print(1 and True) #==True
print(True and 1) #==1
print(1 or False) #==1
print(False or 1) #==1
print(1 and False) #==False
print(False and 1) #==False


# 14681번
# 첫 줄에는 정수 x가 주어진다. (−1000 ≤ x ≤ 1000; x ≠ 0) 다음 줄에는 정수 y가 주어진다. (−1000 ≤ y ≤ 1000; y ≠ 0)
# 점 (x, y)의 사분면 번호(1, 2, 3, 4 중 하나)를 출력한다.

x=int(input())
y=int(input())
if x*y>0:
    if x>0:
        print(1)
    else:
        print(3)
else:
    if x<0:
        print(2)
    else:
        print(4)


# 2884번
# 첫째 줄에 두 정수 H와 M이 주어진다. (0 ≤ H ≤ 23, 0 ≤ M ≤ 59) 그리고 이것은 현재 상근이가 설정한 놓은 알람 시간 H시 M분을 의미한다.
# 입력 시간은 24시간 표현을 사용한다. 24시간 표현에서 하루의 시작은 0:0(자정)이고, 끝은 23:59(다음날 자정 1분 전)이다. 시간을 나타낼 때, 불필요한 0은 사용하지 않는다.
# 첫째 줄에 상근이가 창영이의 방법을 사용할 때, 설정해야 하는 알람 시간을 출력한다. (입력과 같은 형태로 출력하면 된다.)
# eg.1 10 10 -> 9 25
# eg.2 0 30 -> 23 45

a,b=input().split()
a,b=int(a),int(b)
if b>=45:
    print(a,b-45)
else:
    print((a-1)%24,b+15)

a,b=map(int,input().split())
print((a-(b<45))%24,(b-45)%60) #-1 % 10 == 9


# 2525번
# 첫째 줄에는 현재 시각이 나온다. 현재 시각은 시 A (0 ≤ A ≤ 23) 와 분 B (0 ≤ B ≤ 59)가 정수로 빈칸을 사이에 두고 순서대로 주어진다. 두 번째 줄에는 요리하는 데 필요한 시간 C (0 ≤ C ≤ 1,000)가 분 단위로 주어진다.
# 첫째 줄에 종료되는 시각의 시와 분을 공백을 사이에 두고 출력한다. (단, 시는 0부터 23까지의 정수, 분은 0부터 59까지의 정수이다. 디지털 시계는 23시 59분에서 1분이 지나면 0시 0분이 된다.)

a,b = input().split()
a,b = int(a), int(b)
c = int(input())
if c+b<60:
    print(a,b+c)
else:
    print((a+(b+c)//60)%24,(b+c)%60)


# 2480번
# 1에서부터 6까지의 눈을 가진 3개의 주사위를 던져서 다음과 같은 규칙에 따라 상금을 받는 게임이 있다.
# 같은 눈이 3개가 나오면 10,000원+(같은 눈)×1,000원의 상금을 받게 된다.
# 같은 눈이 2개만 나오는 경우에는 1,000원+(같은 눈)×100원의 상금을 받게 된다.
# 모두 다른 눈이 나오는 경우에는 (그 중 가장 큰 눈)×100원의 상금을 받게 된다.
# 예를 들어, 3개의 눈 3, 3, 6이 주어지면 상금은 1,000+3×100으로 계산되어 1,300원을 받게 된다. 또 3개의 눈이 2, 2, 2로 주어지면 10,000+2×1,000 으로 계산되어 12,000원을 받게 된다.
# 3개의 눈이 6, 2, 5로 주어지면 그중 가장 큰 값이 6이므로 6×100으로 계산되어 600원을 상금으로 받게 된다.
# 3개 주사위의 나온 눈이 주어질 때, 상금을 계산하는 프로그램을 작성 하시오.

a,b,c=input().split()
if a==b and b==c:
    print(10000+int(a)*1000)
elif a!=b and b!=c and c!=a:
    print(100*int(max(a,b,c)))
else:
    if a==b or b==c:
        print(1000+int(b)*100)
    else:
        print(1000+int(a)*100)

a,b,c=sorted(input().split()) # 3개 숫자를 순서대로 집어넣음, b를 카운트 하면 같은 숫자 개수를 모두 파악할 수 있음(총 3개여서 가능)
print([c,10+b,10+b+100][[a,b,c].count(b)-1]*100) #b가 1개면 c가 제일 큼, 나머지는 b의 개수에 따라 분류


# 2739번
# 첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 9보다 작거나 같다.
# 출력형식과 같게 N*1부터 N*9까지 출력한다.

a=int(input())
for i in range(9):
    print(f"""{a} * {i+1} = {a*(i+1)}""")
    # print("{} * {} = {}".format(a,i+1,a*(i+1)))


# 10950번
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)
# 각 테스트 케이스마다 A+B를 출력한다.

for i in range(int(input())):
    a,b=map(int,input().split()) # map(자료형,input().split())은 편리함
    print(a+b)


# 8393번
# 첫째 줄에 n (1 ≤ n ≤ 10,000)이 주어진다. 1부터 n까지 합을 출력한다.

a=0
for i in range(int(input())+1):
    a+=i
print(a)


# 15552번
# Python을 사용하고 있다면, input 대신 sys.stdin.readline을 사용할 수 있다.
# 단, 이때는 맨 끝의 개행문자까지 같이 입력받기 때문에 문자열을 저장하고 싶을 경우 .rstrip()을 추가로 해 주는 것이 좋다.
# 첫 줄에 테스트케이스의 개수 T가 주어진다. T는 최대 1,000,000이다.
# 다음 T줄에는 각각 두 정수 A와 B가 주어진다. A와 B는 1 이상, 1,000 이하이다.
# 각 테스트케이스마다 A+B를 한 줄에 하나씩 순서대로 출력한다.

import sys

for i in range(int(sys.stdin.readline())):
    a,b=map(int,sys.stdin.readline().split())
    print(a+b)
    # print(sum(map(int,sys.stdin.readline().split())))


# 2741번
# 자연수 N이 주어졌을 때, 1부터 N까지 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
# 첫째 줄에 100,000보다 작거나 같은 자연수 N이 주어진다. 첫째 줄부터 N번째 줄 까지 차례대로 출력한다.

for i in range(int(input())):
    print(i+1)


# 2742번
# 자연수 N이 주어졌을 때, N부터 1까지 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
# 첫째 줄에 100,000보다 작거나 같은 자연수 N이 주어진다. 첫째 줄부터 N번째 줄 까지 차례대로 출력한다.

a=int(input())
for i in range(a):
    print(a-i)

while a>0:
    print(a)
    a-=1


# 11021번
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)
# 각 테스트 케이스마다 "Case #x: "를 출력한 다음, A+B를 출력한다. 테스트 케이스 번호는 1부터 시작한다.

case=int(input())
case_list=[]
for i in range(case):
    case_list.append(map(int,input().split()))
for i in range(case):
    print(f"""Case #{i+1}: {sum(case_list[i])}""")

for i in range(int(input())):
    print(f"""Case #{i+1}: {sum(map(int,input().split()))}""")


# 11022번
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)
# 각 테스트 케이스마다 "Case #x: A + B = C" 형식으로 출력한다.
# x는 테스트 케이스 번호이고 1부터 시작하며, C는 A+B이다.

for i in range(int(input())):
    a,b=map(int,input().split())
    print(f"""Case #{i+1}: {a} + {b} = {a+b}""")


# 2438번
# 첫째 줄에는 별 1개, 둘째 줄에는 별 2개, N번째 줄에는 별 N개를 찍는 문제
# 첫째 줄에 N(1 ≤ N ≤ 100)이 주어진다.
# 첫째 줄부터 N번째 줄까지 차례대로 별을 출력한다.

for i in range(int(input())):
    print('*'*(i+1))


# 2439번
# 첫째 줄에는 별 1개, 둘째 줄에는 별 2개, N번째 줄에는 별 N개를 찍는 문제
# 하지만, 오른쪽을 기준으로 정렬한 별(예제 참고)을 출력하시오.
# 첫째 줄에 N(1 ≤ N ≤ 100)이 주어진다.
# 첫째 줄부터 N번째 줄까지 차례대로 별을 출력한다.

case=int(input())
for i in range(case):
    print(' '*(case-i-1)+'*'*(i+1)) #,로 구분하면 앞쪽에 공백란이 하나 생김


# 10871번
# 정수 N개로 이루어진 수열 A와 정수 X가 주어진다.
# 이때, A에서 X보다 작은 수를 모두 출력하는 프로그램을 작성하시오.
# 첫째 줄에 N과 X가 주어진다. (1 ≤ N, X ≤ 10,000)
# 둘째 줄에 수열 A를 이루는 정수 N개가 주어진다.
# 주어지는 정수는 모두 1보다 크거나 같고, 10,000보다 작거나 같은 정수이다.
# X보다 작은 수를 입력받은 순서대로 공백으로 구분해 출력한다. X보다 작은 수는 적어도 하나 존재한다.

l,x=map(int,input().split())
A,B=map(int,input().split()),[]
for i in A:
    if i<x:
        B.append(i)
for i in B:
    print(i,end=' ')


# 10952번
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 입력은 여러 개의 테스트 케이스로 이루어져 있다.
# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)
# 입력의 마지막에는 0 두 개가 들어온다.
# 각 테스트 케이스마다 A+B를 출력한다.

while True:
    a,b=map(int,input().split())
    if a==b==0:
        break
    print(a+b)


#10951번
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 입력은 여러 개의 테스트 케이스로 이루어져 있다.
# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다. (0 < A, B < 10)
# 각 테스트 케이스마다 A+B를 출력한다.

while True:
    try:
        a,b=map(int,input().split())
        print(a+b)
    except:
        break


# 1110번
# 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다.
# 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다.
# 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다.
# 다음 예를 보자.
# 26부터 시작한다. 2+6 = 8이다.
# 새로운 수는 68이다. 6+8 = 14이다.
# 새로운 수는 84이다. 8+4 = 12이다.
# 새로운 수는 42이다. 4+2 = 6이다.
# 새로운 수는 26이다.
# 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
# N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

a=int(input())
b,i=a,0
while True:
    i+=1
    c=b%10*10+(b//10+b%10)%10
    if a==c:
        break
    b=c
print(i)


# 10818
# N개의 정수가 주어진다. 이때, 최솟값과 최댓값을 구하는 프로그램을 작성하시오.
# 첫째 줄에 정수의 개수 N (1 ≤ N ≤ 1,000,000)이 주어진다. 둘째 줄에는 N개의 정수를 공백으로 구분해서 주어진다.
# 모든 정수는 -1,000,000보다 크거나 같고, 1,000,000보다 작거나 같은 정수이다.
# 첫째 줄에 주어진 정수 N개의 최솟값과 최댓값을 공백으로 구분해 출력한다.

N=int(input())

n=map(int,input().split())
m=list(n)
print(min(m),max(m))

n=list(map(int,input().split()))
print(min(n),max(m))

m=[]
for i in n:
    m.append(int(i))
print(min(m),max(m))


# 2562번
# 9개의 서로 다른 자연수가 주어질 때, 이들 중 최댓값을 찾고 그 최댓값이 몇 번째 수인지를 구하는 프로그램을 작성하시오.
# 예를 들어, 서로 다른 9개의 자연수 3, 29, 38, 12, 57, 74, 40, 85, 61
# 이 주어지면, 이들 중 최댓값은 85이고, 이 값은 8번째 수이다.
# 첫째 줄부터 아홉 번째 줄까지 한 줄에 하나의 자연수가 주어진다. 주어지는 자연수는 100 보다 작다.
# 첫째 줄에 최댓값을 출력하고, 둘째 줄에 최댓값이 몇 번째 수인지를 출력한다.

a=[]
for i in range(9):
    a.append(int(input()))
print(max(a))
print(a.index(max(a))+1)


# 2577번
# 세 개의 자연수 A, B, C가 주어질 때 A × B × C를 계산한 결과에
# 0부터 9까지 각각의 숫자가 몇 번씩 쓰였는지를 구하는 프로그램을 작성하시오.
# 예를 들어 A = 150, B = 266, C = 427 이라면 A × B × C = 150 × 266 × 427 = 17037300
# 이 되고, 계산한 결과 17037300 에는 0이 3번, 1이 1번, 3이 2번, 7이 2번 쓰였다.
# 첫째 줄에 A, 둘째 줄에 B, 셋째 줄에 C가 주어진다.
# A, B, C는 모두 100보다 크거나 같고, 1,000보다 작은 자연수이다.
# 첫째 줄에는 A × B × C의 결과에 0 이 몇 번 쓰였는지 출력한다.
# 마찬가지로 둘째 줄부터 열 번째 줄까지 A × B × C의 결과에
# 1부터 9까지의 숫자가 각각 몇 번 쓰였는지 차례로 한 줄에 하나씩 출력한다.

A=1
for i in range(3):
    A*=int(input())
a=[]
while A>=1:
    a.append(A%10)
    A=int(A/10)
for i in range(10):
    print(a.count(i))

A=str(A)
for i in range(10):
    print(A.count(str(i)))


# 3052번
# 두 자연수 A와 B가 있을 때, A%B는 A를 B로 나눈 나머지 이다.
# 예를 들어, 7, 14, 27, 38을 3으로 나눈 나머지는 1, 2, 0, 2이다.
# 수 10개를 입력받은 뒤, 이를 42로 나눈 나머지를 구한다.
# 그 다음 서로 다른 값이 몇 개 있는지 출력하는 프로그램을 작성하시오.
# 첫째 줄부터 열번째 줄 까지 숫자가 한 줄에 하나씩 주어진다.
# 이 숫자는 1,000보다 작거나 같고, 음이 아닌 정수이다.
# 첫째 줄에, 42로 나누었을 때, 서로 다른 나머지가 몇 개 있는지 출력한다.

a=[]
for i in range(10):
    a.append(int(input())%42)
# a=[int(input())%42 for i in range(10)]

print(len(set(a)))


# 1546번
# 세준이는 기말고사를 망쳤다. 세준이는 점수를 조작해서 집에 가져가기로 했다.
# 일단 세준이는 자기 점수 중에 최댓값을 골랐다. 이 값을 M이라고 한다.
# 그리고 나서 모든 점수를 점수/M*100으로 고쳤다.
# 예를 들어, 세준이의 최고점이 70이고, 수학점수가 50이었으면 수학점수는 50/70*100이 되어 71.43점이 된다.
# 세준이의 성적을 위의 방법대로 새로 계산했을 때, 새로운 평균을 구하는 프로그램을 작성하시오.
# 첫째 줄에 시험 본 과목의 개수 N이 주어진다. 이 값은 1000보다 작거나 같다.
# 둘째 줄에 세준이의 현재 성적이 주어진다.
# 이 값은 100보다 작거나 같은 음이 아닌 정수이고, 적어도 하나의 값은 0보다 크다.
# 첫째 줄에 새로운 평균을 출력한다. 실제 정답과 출력값의 절대오차 또는 상대오차가 10-2 이하이면 정답이다.

n=int(input())
s=list(map(int,input().split()))
print(sum(s)/len(s)/max(s)*100)


# 8958번
# "OOXXOXXOOO"와 같은 OX퀴즈의 결과가 있다.
# O는 문제를 맞은 것이고, X는 문제를 틀린 것이다.
# 문제를 맞은 경우 그 문제의 점수는 그 문제까지 연속된 O의 개수가 된다.
# 예를 들어, 10번 문제의 점수는 3이 된다.
# "OOXXOXXOOO"의 점수는 1+2+0+0+1+0+0+1+2+3 = 10점이다.
# OX퀴즈의 결과가 주어졌을 때, 점수를 구하는 프로그램을 작성하시오.
# 첫째 줄에 테스트 케이스의 개수가 주어진다.
# 각 테스트 케이스는 한 줄로 이루어져 있고, 길이가 0보다 크고 80보다 작은 문자열이 주어진다.
# 문자열은 O와 X만으로 이루어져 있다.
# 각 테스트 케이스마다 점수를 출력한다.

for i in range(int(input())):
    s,c=0,0
    r=input()
    for i in r:
        if i=='X':
            c=0
        else:
            s+=1+c
            c+=1
    print(s)


# 4344번
# 대학생 새내기들의 90%는 자신이 반에서 평균은 넘는다고 생각한다.
# 당신은 그들에게 슬픈 진실을 알려줘야 한다.
# 첫째 줄에는 테스트 케이스의 개수 C가 주어진다.
# 둘째 줄부터 각 테스트 케이스마다 학생의 수 N(1 ≤ N ≤ 1000, N은 정수)이 첫 수로 주어지고,
# 이어서 N명의 점수가 주어진다. 점수는 0보다 크거나 같고, 100보다 작거나 같은 정수이다.
# 각 케이스마다 한 줄씩 평균을 넘는 학생들의 비율을 반올림하여 소수점 셋째 자리까지 출력한다.

for i in range(int(input())):
    s=list(map(int,input().split()))
    c=s.pop(0)
    aver=sum(s)/c
    n=0
    for i in s:
        if i>aver:
            n+=1
    print(f"{n/c*100:.3f}%") #:.3f -> 셋째 자리까지 나타내시오.


# 15596번
# 정수 n개가 주어졌을 때, n개의 합을 구하는 함수를 작성하시오.
# 작성해야 하는 함수는 다음과 같다.
# def solve(a: list) -> int
# a: 합을 구해야 하는 정수 n개가 저장되어 있는 리스트 (0 ≤ a[i] ≤ 1,000,000, 1 ≤ n ≤ 3,000,000)
# 리턴값: a에 포함되어 있는 정수 n개의 합 (정수)

def solve(a: list):
    return sum(a)


# 4673번
# 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다.
# 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자.
# 예를 들어, d(75) = 75+7+5 = 87이다.
# 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))),
# ...과 같은 무한 수열을 만들 수 있다.
# 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고,
# 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.
# 이런식으로 다음과 같은 수열을 만들 수 있다.
# 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
# n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고,
# 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다.
# 예를 들어, 101은 생성자가 2개(91과 100) 있다.
# 생성자가 없는 숫자를 셀프 넘버라고 한다.
# 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
# 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
# 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

def sn(a):
    rt=[]
    for i in str(a):
        rt.append(int(i))
    rt.append(a)
    return sum(rt)
n=1
SNL=[i for i in range(1,10001)]
while n<10001:
    if sn(n) in SNL:
        SNL.remove(sn(n))
    n+=1
# NSN=[sn(i) for i in range(1,10001)]
# SN=[i for i in range(1,10001) if i not in NSN]
for i in SNL:
    print(i)


# Class & Instance
def plus(*arg): # *arg = 비지정변수, **kwarg = 지정변수
    result=0
    for number in arg:
        result+=number
    return result


# 1316 번
# 그룹 단어란 단어에 존재하는 모든 문자에 대해서, 각 문자가 연속해서 나타나는 경우만을 말한다.
# 예를 들면, ccazzzzbb는 c, a, z, b가 모두 연속해서 나타나고, kin도 k, i, n이 연속해서 나타나기 때문에 그룹 단어이지만, aabbbccb는 b가 떨어져서 나타나기 때문에 그룹 단어가 아니다.
# 단어 N개를 입력으로 받아 그룹 단어의 개수를 출력하는 프로그램을 작성하시오.
# 첫째 줄에 단어의 개수 N이 들어온다. N은 100보다 작거나 같은 자연수이다.
# 둘째 줄부터 N개의 줄에 단어가 들어온다. 단어는 알파벳 소문자로만 되어있고 중복되지 않으며, 길이는 최대 100이다.
# 첫째 줄에 그룹 단어의 개수를 출력한다.

count=0
for i in range(int(input())):
    bools = True
    a=input()
    for i in a:
        if i*a.count(i) not in a:
            bools*=False
    if bools == True:
        count+=1
print(count)


# 2941 번
# 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
# č:c=, ć:c-, dž:dz=, đ:d-, li:li, ni:ni, š:s=, ž:z=
# 예를 들어, lies=niak은 크로아티아 알파벳 6개(li, e, š, ni, a, k)로 이루어져 있다. 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.
# dž는 무조건 하나의 알파벳으로 쓰이고, d와 ž가 분리된 것으로 보지 않는다. li와 ni도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.
# 첫째 줄에 최대 100글자의 단어가 주어진다. 알파벳 소문자와 '-', '='로만 이루어져 있다.
# 단어는 크로아티아 알파벳으로 이루어져 있다. 문제 설명의 표에 나와있는 알파벳은 변경된 형태로 입력된다.
# 입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.

c_alphbet = {"c=":"č", "c-":"ć", "dz=":"ž", "d-":"đ", "li":"L", "ni":"N", "s=":"š", "z=":"ž"}
a=input()
for i in c_alphbet:
    if i in a:
        a=a.replace(i, c_alphbet[i])
print(len(a))


# 10872 번
# 0보다 크거나 같은 정수 N이 주어진다. 이때, N!을 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 정수 N(0 ≤ N ≤ 12)이 주어진다.
# 출력
# 첫째 줄에 N!을 출력한다.

def factorial(n):
    if n==1 or n==0:
        return 1
    else:
        return n*factorial(n-1)
print(factorial(int(input())))


# 10870 번
# 피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.
# 이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.
# n=17일때 까지 피보나치 수를 써보면 다음과 같다.
# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597
# n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 n이 주어진다. n은 20보다 작거나 같은 자연수 또는 0이다.
# 출력
# 첫째 줄에 n번째 피보나치 수를 출력한다.

def fibonacci(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return fibonacci(n-1)+fibonacci(n-2)
print(fibonacci(int(input())))


# 17478 번
# 평소에 질문을 잘 받아주기로 유명한 중앙대학교의 JH 교수님은 학생들로부터 재귀함수가 무엇인지에 대하여 많은 질문을 받아왔다.
# 매번 질문을 잘 받아주셨던 JH 교수님이지만 그는 중앙대학교가 자신과 맞는가에 대한 고민을 항상 해왔다.
# 중앙대학교와 자신의 길이 맞지 않다고 생각한 JH 교수님은 결국 중앙대학교를 떠나기로 결정하였다.
# 떠나기 전까지도 제자들을 생각하셨던 JH 교수님은 재귀함수가 무엇인지 물어보는 학생들을 위한 작은 선물로 자동 응답 챗봇을 준비하기로 했다.
# JH 교수님이 만들 챗봇의 응답을 출력하는 프로그램을 만들어보자.
# 입력
# 교수님이 출력을 원하는 재귀 횟수 N(1 ≤ N ≤ 50)이 주어진다.
# 출력
# 출력 예시를 보고 재귀 횟수에 따른 챗봇의 응답을 출력한다.

def Recursion(a,n):
    print(f'{"____"*a}"재귀함수가 뭔가요?"')
    if n==a:
        print(f'{"____"*a}"재귀함수는 자기 자신을 호출하는 함수라네"')
    else:
        print(f'''{"____"*a}"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.
{"____"*a}마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.
{"____"*a}그의 답은 대부분 옳았다고 하네. 그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어."''')
        a += 1
        Recursion(a, n)
        print(f'{"____"*a}라고 답변하였지.')
n = int(input())
print("어느 한 컴퓨터공학과 학생이 유명한 교수님을 찾아가 물었다.")
Recursion(0, n)
print("라고 답변하였지.")


# 25083 번
# 문제
# 아래 예제와 같이 새싹을 출력하시오.
# 입력
# 입력은 없다.
# 출력
# 새싹을 출력한다.

print(f"""         ,r'"7
r`-_   ,'  ,/
 \. ". L_r'
   `~\/
      |
      |""")


# 1193 번
# 무한히 큰 배열에 다음과 같이 분수들이 적혀있다.
# 1/1	1/2	1/3	1/4	1/5	…
# 2/1	2/2	2/3	2/4	…	…
# 3/1	3/2	3/3	…	…	…
# 4/1	4/2	…	…	…	…
# 5/1	…	…	…	…	…
# …	…	…	…	…	…
# 이와 같이 나열된 분수들을 1/1 → 1/2 → 2/1 → 3/1 → 2/2 → … 과 같은 지그재그 순서로 차례대로 1번, 2번, 3번, 4번, 5번, … 분수라고 하자.
# X가 주어졌을 때, X번째 분수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 X(1 ≤ X ≤ 10,000,000)가 주어진다.
# 출력
# 첫째 줄에 분수를 출력한다.

# 1/1
# 1/2 2/1
# 1/3 2/2 3/1
# 4/1 3/2 2/3 1/4
# 1/5 2/4 3/3 4/2 5/1
# n 번째 집합까지 원소 개수 -> n(n+1)/2

n=1
a=int(input())
while True:
    if n*(n+1)/2>=a:
        a-=n*(n-1)/2
        break
    n+=1
if n%2==0:
    print(f"{int(a)}/{int(n+1-a)}")
else:
    print(f"{int(n+1-a)}/{int(a)}")


# 2839 번
# 문제
# 상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
# 상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
# 상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 N이 주어진다. (3 ≤ N ≤ 5000)
# 출력
# 상근이가 배달하는 봉지의 최소 개수를 출력한다. 만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력한다.

number=0
weight=int(input())
a=weight//5
b=weight//3
num=[]
for i in range(a+1):
    for i in range(b+1):
        if weight>5*i+3*i:
            continue
        elif weight==5*i+3*i:
            num.append((i+i))
if len(num) == 0:
    print(-1)
else:
    print(min(num))


# 2292 번
# 문제
# 그림과 같이 육각형으로 이루어진 벌집이 있다. 그림에서 보는 바와 같이 중앙의 방 1부터 시작해서 이웃하는 방에 돌아가면서 1씩 증가하는 번호를 주소로 매길 수 있다. 숫자 N이 주어졌을 때, 벌집의 중앙 1에서 N번 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나가는지(시작과 끝을 포함하여)를 계산하는 프로그램을 작성하시오. 예를 들면, 13까지는 3개, 58까지는 5개를 지난다.
# 입력
# 첫째 줄에 N(1 ≤ N ≤ 1,000,000,000)이 주어진다.
# 출력
# 입력으로 주어진 방까지 최소 개수의 방을 지나서 갈 때 몇 개의 방을 지나는지 출력한다.

def bees(n):
    for i in range(n):
        if 3*i**2+3*i+1>=n:
            return i+1
print(bees(int(input())))


# 10250 번
# 문제
# ACM 호텔 매니저 지우는 손님이 도착하는 대로 빈 방을 배정하고 있다.
# 고객 설문조사에 따르면 손님들은 호텔 정문으로부터 걸어서 가장 짧은 거리에 있는 방을 선호한다고 한다.
# 여러분은 지우를 도와 줄 프로그램을 작성하고자 한다.
# 즉 설문조사 결과 대로 호텔 정문으로부터 걷는 거리가 가장 짧도록 방을 배정하는 프로그램을 작성하고자 한다.
# 문제를 단순화하기 위해서 호텔은 직사각형 모양이라고 가정하자.
# 각 층에 W 개의 방이 있는 H 층 건물이라고 가정하자 (1 ≤ H, W ≤ 99). 그리고 엘리베이터는 가장 왼쪽에 있다고 가정하자(그림 1 참고).
# 이런 형태의 호텔을 H × W 형태 호텔이라고 부른다. 호텔 정문은 일층 엘리베이터 바로 앞에 있는데, 정문에서 엘리베이터까지의 거리는 무시한다.
# 또 모든 인접한 두 방 사이의 거리는 같은 거리(거리 1)라고 가정하고 호텔의 정면 쪽에만 방이 있다고 가정한다.
# 방 번호는 YXX 나 YYXX 형태인데 여기서 Y 나 YY 는 층 수를 나타내고 XX 는 엘리베이터에서부터 세었을 때의 번호를 나타낸다.
# 즉, 그림 1 에서 빗금으로 표시한 방은 305 호가 된다.
# 손님은 엘리베이터를 타고 이동하는 거리는 신경 쓰지 않는다. 다만 걷는 거리가 같을 때에는 아래층의 방을 더 선호한다.
# 예를 들면 102 호 방보다는 301 호 방을 더 선호하는데, 102 호는 거리 2 만큼 걸어야 하지만 301 호는 거리 1 만큼만 걸으면 되기 때문이다.
# 같은 이유로 102 호보다 2101 호를 더 선호한다.
# 여러분이 작성할 프로그램은 초기에 모든 방이 비어있다고 가정하에 이 정책에 따라 N 번째로 도착한 손님에게 배정될 방 번호를 계산하는 프로그램이다.
# 첫 번째 손님은 101 호, 두 번째 손님은 201 호 등과 같이 배정한다. 그림 1 의 경우를 예로 들면, H = 6이므로 10 번째 손님은 402 호에 배정해야 한다.
# 입력
# 프로그램은 표준 입력에서 입력 데이터를 받는다. 프로그램의 입력은 T 개의 테스트 데이터로 이루어져 있는데 T 는 입력의 맨 첫 줄에 주어진다.
# 각 테스트 데이터는 한 행으로서 H, W, N, 세 정수를 포함하고 있으며 각각 호텔의 층 수, 각 층의 방 수, 몇 번째 손님인지를 나타낸다
# (1 ≤ H, W ≤ 99, 1 ≤ N ≤ H × W).
# 출력
# 프로그램은 표준 출력에 출력한다. 각 테스트 데이터마다 정확히 한 행을 출력하는데, 내용은 N 번째 손님에게 배정되어야 하는 방 번호를 출력한다.

for i in range(int(input())):
    H, W, N = map(int,input().split()) # H = 층, W = 호
    if N%H==0:
        RN=str(N//H)
    else:
        RN=str(N//H+1)
    if len(RN) == 1:
        RN="0"+RN
    # print(RN)
    # print(f"{str(N%H)+RN}={str(N%H)}+{RN}")
    if N%H!=0:
        RN=str(N%H)+RN
    else:
        RN=str(H)+RN
    print(RN)


# 2750 번
# 문제
# N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수 주어진다. 이 수는 절댓값이 1,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.
# 출력
# 첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.

# 전체 리스트 입력 후 정렬
lst=[]
for i in range(int(input())):
    lst.append(int(input()))
lst.sort()
for i in lst:
    print(i)

# 삽입 정렬
lst=[]
for i in range(int(input())):
    if len(lst) == 0:
        lst.append(int(input()))
    else:
        n = int(input())
        if n>lst[-1]:
            lst.append(n)
        else:
            for j in lst:
                if n < j:
                    index = lst.index(j)
                    break
            lst.insert(index, n)
for i in lst:
    print(i)

# 거품 정렬
lst=[]
for i in range(int(input())):
    lst.append(int(input()))
while True:
    bools=True
    for i in range(len(lst)-1):
        if lst[i]>lst[i+1]:
            lst[i], lst[i+1] = lst[i+1], lst[i]
            bools*=False
    if bools==True:
        break
print(lst)


# 2477 번
# 문제
# 시골에 있는 태양이의 삼촌 댁에는 커다란 참외밭이 있다.
# 문득 태양이는 이 밭에서 자라는 참외가 도대체 몇 개나 되는지 궁금해졌다.
# 어떻게 알아낼 수 있는지 골똘히 생각하다가 드디어 좋은 아이디어가 떠올랐다.
# 유레카! 1m2의 넓이에 자라는 참외 개수를 헤아린 다음, 참외밭의 넓이를 구하면 비례식을 이용하여 참외의 총개수를 구할 수 있다.
# 1m2의 넓이에 자라는 참외의 개수는 헤아렸고, 이제 참외밭의 넓이만 구하면 된다.
# 참외밭은 ㄱ-자 모양이거나 ㄱ-자를 90도, 180도, 270도 회전한 모양(┏, ┗, ┛ 모양)의 육각형이다.
# 다행히도 밭의 경계(육각형의 변)는 모두 동서 방향이거나 남북 방향이었다.
# 밭의 한 모퉁이에서 출발하여 밭의 둘레를 돌면서 밭경계 길이를 모두 측정하였다.
# 예를 들어 참외밭 면적은 6800m2이다.
# 만약 1m2의 넓이에 자라는 참외의 개수가 7이라면, 이 밭에서 자라는 참외의 개수는 47600으로 계산된다.
# 1m2의 넓이에 자라는 참외의 개수와, 참외밭을 이루는 육각형의 임의의 한 꼭짓점에서 출발하여 반시계방향으로 둘레를 돌면서 지나는 변의 방향과 길이가 순서대로 주어진다.
# 이 참외밭에서 자라는 참외의 수를 구하는 프로그램을 작성하시오.
# 입력
# 첫 번째 줄에 1m2의 넓이에 자라는 참외의 개수를 나타내는 양의 정수 K (1 ≤ K ≤ 20)가 주어진다. 참외밭을 나타내는 육각형의 임의의 한 꼭짓점에서 출발하여 반시계방향으로 둘레를 돌면서 지나는 변의 방향과 길이 (1 이상 500 이하의 정수) 가 둘째 줄부터 일곱 번째 줄까지 한 줄에 하나씩 순서대로 주어진다. 변의 방향에서 동쪽은 1, 서쪽은 2, 남쪽은 3, 북쪽은 4로 나타낸다.
# 출력
# 첫째 줄에 입력으로 주어진 밭에서 자라는 참외의 수를 출력한다.

melon = int(input())
length = []
for i in range(6):
    direction, leng = map(int,input().split())
    length.append(leng)
width = max([length[0], length[2], length[4]])
height = max([length[1], length[3], length[5]])
a,b = length.index(width)+3, length.index(height)+3
if a>5:
    a-=6
if b>5:
    b-=6
area = width * height - length[a] * length[b]
print(area*melon)


# 3009 번
# 문제
# 세 점이 주어졌을 때, 축에 평행한 직사각형을 만들기 위해서 필요한 네 번째 점을 찾는 프로그램을 작성하시오.
# 입력
# 세 점의 좌표가 한 줄에 하나씩 주어진다. 좌표는 1보다 크거나 같고, 1000보다 작거나 같은 정수이다.
# 출력
# 직사각형의 네 번째 점의 좌표를 출력한다.

a,b=[],[]
for i in range(3):
    A, B=map(int,input().split())
    a.append(A)
    b.append(B)
for i in a:
    if a.count(i) == 1:
        x = i
        break
for i in b:
    if b.count(i) == 1:
        y = i
        break
print(x,y)


# 3034 번
# 문제
# 창영이는 화가나서 성냥을 바닥에 던졌다.
# 상근이는 바닥이 더러워진 것을 보고 창영이를 매우 혼냈다.
# 강산이는 근처에서 박스를 발견했다.
# 상덕이는 강산이가 발견한 박스를 상근이에게 주었다.
# 상근이는 박스에 던진 성냥을 모두 담아오라고 시켰다.
# 하지만, 박스에 들어가지 않는 성냥도 있다.
# 이런 성냥은 박스에 담지 않고 희원이에게 줄 것이다.
# 성냥이 박스에 들어가려면, 박스의 밑면에 성냥이 모두 닿아야 한다.
# 박스의 크기와 성냥의 길이가 주어졌을 때, 성냥이 박스에 들어갈 수 있는지 없는지를 구하는 프로그램을 작성하시오. 창영이는 성냥을 하나씩 검사한다.
# 입력
# 첫째 줄에 던진 성냥의 개수 N과 박스의 가로 크기 W와 세로 크기 H가 주어진다. (1 ≤ N ≤ 50, 1 ≤ W, H ≤ 100)
# 다음 N개 줄에는 성냥의 길이가 주어진다. 길이는 1보다 크거나 같고 1000보다 작거나 같은 자연수이다.
# 출력
# 입력으로 주어지는 각각의 성냥에 대해서, 박스안에 들어갈 수 있으면 "DA" 없으면 "NE"를 출력한다.

N, W, H = map(int,input().split())
for i in range(N):
    if int(input()) <= (W**2 + H**2)**0.5:
        print("DA")
    else:
        print("NE")


# 3053 번
# 문제
# 19세기 독일 수학자 헤르만 민코프스키는 비유클리드 기하학 중 택시 기하학을 고안했다.
# 택시 기하학에서 두 점 T1(x1,y1), T2(x2,y2) 사이의 거리는 다음과 같이 구할 수 있다.
# D(T1,T2) = |x1-x2| + |y1-y2|
# 두 점 사이의 거리를 제외한 나머지 정의는 유클리드 기하학에서의 정의와 같다.
# 따라서 택시 기하학에서 원의 정의는 유클리드 기하학에서 원의 정의와 같다.
# 원: 평면 상의 어떤 점에서 거리가 일정한 점들의 집합
# 반지름 R이 주어졌을 때, 유클리드 기하학에서 원의 넓이와, 택시 기하학에서 원의 넓이를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 반지름 R이 주어진다. R은 10,000보다 작거나 같은 자연수이다.
# 출력
# 첫째 줄에는 유클리드 기하학에서 반지름이 R인 원의 넓이를, 둘째 줄에는 택시 기하학에서 반지름이 R인 원의 넓이를 출력한다. 정답과의 오차는 0.0001까지 허용한다

import math
r = int(input())
print(math.pi*(r**2))
print(((2*r)**2)/2)


# 5086 번
# 문제
# 4 × 3 = 12이다.
# 이 식을 통해 다음과 같은 사실을 알 수 있다.
# 3은 12의 약수이고, 12는 3의 배수이다.
# 4도 12의 약수이고, 12는 4의 배수이다.
# 두 수가 주어졌을 때, 다음 3가지 중 어떤 관계인지 구하는 프로그램을 작성하시오.
# 1. 첫 번째 숫자가 두 번째 숫자의 약수이다.
# 2. 첫 번째 숫자가 두 번째 숫자의 배수이다.
# 3. 첫 번째 숫자가 두 번째 숫자의 약수와 배수 모두 아니다.
# 입력
# 입력은 여러 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 10,000이 넘지않는 두 자연수로 이루어져 있다. 마지막 줄에는 0이 2개 주어진다. 두 수가 같은 경우는 없다.
# 출력
# 각 테스트 케이스마다 첫 번째 숫자가 두 번째 숫자의 약수라면 factor를, 배수라면 multiple을, 둘 다 아니라면 neither를 출력한다.

while True:
    a, b = map(int,input().split())
    if a == b == 0:
        break
    if b%a == 0:
        print("factor")
    elif a%b == 0:
        print("multiple")
    else:
        print("neither")


# 1010 번
# 문제
# 재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다.
# 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다.
# 강 주변에서 다리를 짓기에 적합한 곳을 사이트라고 한다.
# 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 N개의 사이트가 있고 동쪽에는 M개의 사이트가 있다는 것을 알았다. (N ≤ M)
# 재원이는 서쪽의 사이트와 동쪽의 사이트를 다리로 연결하려고 한다.
# (이때 한 사이트에는 최대 한 개의 다리만 연결될 수 있다.)
# 재원이는 다리를 최대한 많이 지으려고 하기 때문에 서쪽의 사이트 개수만큼 (N개) 다리를 지으려고 한다.
# 다리끼리는 서로 겹쳐질 수 없다고 할 때 다리를 지을 수 있는 경우의 수를 구하는 프로그램을 작성하라.
# 입력
# 입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다.
# 그 다음 줄부터 각각의 테스트케이스에 대해 강의 서쪽과 동쪽에 있는 사이트의 개수 정수 N, M (0 < N ≤ M < 30)이 주어진다.
# 출력
# 각 테스트 케이스에 대해 주어진 조건하에 다리를 지을 수 있는 경우의 수를 출력한다.

from math import factorial
for i in range(int(input())):
    a, b = map(int,input().split())
    print(int(factorial(b)/(factorial(a)*factorial(b-a))))


# 11050 번
# 문제
# 자연수 N과 정수 K가 주어졌을 때 이항계수 binom{N}{K}를 구하는 프로그램을 작성하시오.
#입력
# 첫째 줄에 N과 정수 K가 주어진다.(1 ≤ N ≤ 10, 0 ≤ K ≤ N)
# 출력
# binom{N}{K}를 출력한다.

from math import factorial
N, K = map(int,input().split())
print(int(factorial(N)/(factorial(K)*factorial(N-K))))


# 11051 번
# 문제
# 자연수 N과 정수 K가 주어졌을 때 이항계수 binom{N}{K}를 10,007로 나눈 나머지를 구하는 프로그램을 작성하시오.
#입력
# 첫째 줄에 N과 정수 K가 주어진다.(1 ≤ N ≤ 10, 0 ≤ K ≤ N)
# 출력
# binom{N}{K}를 10,007로 나눈 나머지를 출력한다.

# 부동 소수점에 관한 문제, N_K 계산 시 / 가 아닌 // 를 사용
from math import factorial
N, K = map(int,input().split())
N_K = int(factorial(N)//(factorial(K)*factorial(N-K)))
print(int(N_K%10007))


# 1037 번
# 문제
# 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.
# 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다.
# 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.
# 출력
# 첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.

count = int(input())
divisor = list(map(int,input().split()))
divisor.sort()
print(divisor[0]*divisor[-1])
# 또는 .sort() 없이 max(divisor)*min(divisor)


# 1676 번
# 문제
# N!에서 뒤에서부터 처음 0이 아닌 숫자가 나올 때까지 0의 개수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 N이 주어진다. (0 ≤ N ≤ 500)
# 출력
# 첫째 줄에 구한 0의 개수를 출력한다.

# 10으로 나누면서 확인
from math import factorial
a = factorial(int(input()))
count = 0
while a%10==0:
    a//=10
    count+=1
print(count)

# 역순 리스트 만들어서 [0]부터 확인
from math import factorial
a = list(str(factorial(int(input()))))
a.reverse()
count = 0
for i in a:
    if i=="0":
        count+=1
    else:
        break
print(count)

# 역순 리스트 만들어서 index 확인
from math import factorial
a = list(str(factorial(int(input()))))
a.reverse()
count = len(a)
for i in range(1,10):
    if i in a:
        count=min(0, a.index(i))
print(count)

# 충분히 많은 2의 개수를 고려하여 5의 배수 = 0이 1개, 5*5의 배수 = 0이 2개, 5*5*5의 배수 = 0이 3개 로 계산
a = int(input())
print(a//5+a//25+a//125)


# 1065 번
# 문제
# 어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다.
# 등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다.
# N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 1,000보다 작거나 같은 자연수 N이 주어진다.
# 출력
# 첫째 줄에 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력한다.

N = int(input())
if N < 100:
    print(N)
else:
    count=99
    for i in range(100,N+1):
        A = i // 100
        B = i % 100 // 10
        C = i % 10
        if 2 * B == A + C:
            count+=1
    print(count)


# 2775 번
# 문제
# 평소 반상회에 참석하는 것을 좋아하는 주희는 이번 기회에 부녀회장이 되고 싶어
# 각 층의 사람들을 불러 모아 반상회를 주최하려고 한다.
# 이 아파트에 거주를 하려면 조건이 있는데,
# “a층의 b호에 살려면 자신의 아래(a-1)층의 1호부터 b호까지 사람들의 수의 합만큼 사람들을 데려와 살아야 한다”
# 는 계약 조항을 꼭 지키고 들어와야 한다.
# 아파트에 비어있는 집은 없고 모든 거주민들이 이 계약 조건을 지키고 왔다고 가정했을 때,
# 주어지는 양의 정수 k와 n에 대해 k층에 n호에는 몇 명이 살고 있는지 출력하라.
# 단, 아파트에는 0층부터 있고 각층에는 1호부터 있으며, 0층의 i호에는 i명이 산다.
# 입력
# 첫 번째 줄에 Test case의 수 T가 주어진다. 그리고 각각의 케이스마다 입력으로 첫 번째 줄에 정수 k, 두 번째 줄에 정수 n이 주어진다
# 출력
# 각각의 Test case에 대해서 해당 집에 거주민 수를 출력하라.

# 풀이 1 - 시간 초과
def nk(k,n):
    if k==0:
        return n # 0층 i호는 i
    else:
        sum = 0
        for i in range(1,n+1): # k층 n호는 k-1층의 1~n호 합
            sum+=nk(k-1,i)
        return sum

for i in range(int(input())):
    k = int(input())
    n = int(input())
    print(nk(k,n))

# 풀이 2 - 시간 초과
def nk(k,n):
    if k==0:
        return n
    elif n==1:
        return 1
    else:
        return nk(k,n-1)+nk(k-1,n) # k층 n호는 k층 n-1호와 k-1층 n호의 합과 같음

for i in range(int(input())):
    k = int(input())
    n = int(input())
    print(nk(k,n))

# 풀이 3 - 파스칼의 삼각형 문제였음......
from math import factorial

for i in range(int(input())):
    k = int(input())
    n = int(input())
    print(int(factorial(k+n)/(factorial(n-1)*factorial(k+1))))


# 1978 번
# 문제
# 주어진 수 N개 중에서 소수가 몇 개인지 찾아서 출력하는 프로그램을 작성하시오.
# 입력
# 첫 줄에 수의 개수 N이 주어진다. N은 100이하이다. 다음으로 N개의 수가 주어지는데 수는 1,000 이하의 자연수이다.
# 출력
# 주어진 수들 중 소수의 개수를 출력한다.

# 풀이 1
cnt=0
N = int(input()) # 숫자 개수 입력
n_list=list(map(int,input().split())) # 주어진 수
if max(n_list) == 1:
    print(0)
else:
    m_list = [i for i in range(2, max(n_list)+1)] # 2 ~ n_list의 최대값까지 리스트 생성
    # m_list의 각 원소의 배수를 m_list에서 제외함
    for i in m_list:
        print(f"#####{i}#####")
        for k in range(2, max(m_list)):
            if i*k in m_list:
                m_list.remove(i*k)
                print(f"{i} * {k} = {i*k} is removed")
print(m_list)
for i in n_list:
    if i in m_list:
        cnt+=1
print(cnt)

# 풀이? - prime number list를 다 만들고 있는지만 체크
N = int(input()) # 숫자 개수 입력
n_list=list(map(int,input().split())) # 주어진 수
cnt=0
primenumber = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
               101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
               211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
               307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
               401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
               503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
               601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,
               701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
               809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
               907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
for i in n_list:
    if i in primenumber:
        cnt+=1
print(cnt)

# 풀이 2 - 입력된 list를 나눠서 맞는지만 먼저 체크
def prime(n):
    if n == 1:
        return 0
    else:
        m = int(n**0.5+1)
        o = 1

        for i in range(2,m):
            if n % i == 0:
                o = 0
                break
        return o

N = int(input())
n_list = list(map(int,input().split()))
m_list = []
for i in n_list:
    m_list.append(prime(i))
print(sum(m_list))


# 2581 번
# 문제
# 자연수 M과 N이 주어질 때 M이상 N이하의 자연수 중 소수인 것을 모두 골라 이들 소수의 합과 최솟값을 찾는 프로그램을 작성하시오.
# 예를 들어 M=60, N=100인 경우 60이상 100이하의 자연수 중 소수는 61, 67, 71, 73, 79, 83, 89, 97 총 8개가 있으므로, 이들 소수의 합은 620이고, 최솟값은 61이 된다.
# 입력
# 입력의 첫째 줄에 M이, 둘째 줄에 N이 주어진다.
# M과 N은 10,000이하의 자연수이며, M은 N보다 작거나 같다.
# 출력
# M이상 N이하의 자연수 중 소수인 것을 모두 찾아 첫째 줄에 그 합을, 둘째 줄에 그 중 최솟값을 출력한다.
# 단, M이상 N이하의 자연수 중 소수가 없을 경우는 첫째 줄에 -1을 출력한다.

# 풀이 1 - 시간 초과
n=int(input())
m=int(input())
num_list=[i for i in range(1,m+1)]
for i in num_list:
    if i == 1:
        continue
    else:
        for k in range(2, m+1):
            if i*k in num_list:
                num_list.remove(i*k)
for i in range(1,n):
    try:
        num_list.remove(i)
    except:
        continue
print(sum(num_list))
print(min(num_list))

# 풀이 2 - 시간 초과
min_ = int(input())
max_ = int(input())
m_list = [i for i in range(min_, max_+1)] # min ~ max까지 리스트 생성
# m_list의 각 원소의 배수를 m_list에서 제외함
for i in range(2, int(max(m_list)**0.5+1)):
    for k in range(2, max(m_list)+1):
        if i*k in m_list:
            m_list.remove(i*k)
print(sum(m_list))
print(min(m_list))

# 풀이 3 - 소수 판별 함수 사용
def prime(n):
    if n == 1:
        return 0
    else:
        for i in range(2, int(n**0.5 + 1)):
            if n % i == 0:
                n = 0
                break
    return n
min_ = int(input())
max_ = int(input())
m_list = [i for i in range(min_, max_+1)] # min ~ max까지 리스트 생성
M_LIST = list(set(map(prime,m_list))) # map을 이용해서 m_list 원소에 prime 을 적용하고 M_LIST에 반환
if 0 in M_LIST:
    M_LIST.remove(0)
if len(M_LIST) == 0:
    print(-1)
else:
    print(sum(M_LIST))
    print(min(M_LIST))


# 1929 번 - 개선 필요
# 문제
# M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.
# 출력
# 한 줄에 하나씩, 증가하는 순서대로 소수를 출력한다.
def prime(n):
    if n == 1:
        return 0
    else:
        for i in range(2, int(n**0.5 + 1)):
            if n % i == 0:
                n = 0
                break
    return n
M, N = map(int,input().split())
M_N = [i for i in range(M, N+1)] # min ~ max까지 리스트 생성
prlist = list(set(map(prime,M_N))) # map을 이용해서 prlist 원소에 prime 을 적용하고 prlist에 반환
if 0 in prlist:
    prlist.remove(0)
prlist.sort()
for i in prlist:
    print(i)


# 25191 번
# 문제
# 치킨 댄스를 추고 있는 곰곰이를 본 임스는 치킨을 먹고 싶어졌다. 임스는 치킨 1마리를 먹을 때 반드시 집에 있는 콜라 2개나 맥주 1개와 같이 먹어야 한다.
# 또한, 치킨집에 있는 치킨의 개수보다 치킨을 많이 시켜먹을 수는 없다.
# 치킨집에 있는 치킨의 개수와 임스의 집에 있는 콜라, 맥주의 개수가 주어졌을 때, 임스가 시켜먹을 수 있는 치킨의 총 개수를 출력하시오.
# 입력
# 첫 번째 줄에는 치킨집에 있는 치킨의 총 개수를 나타내는 정수 N이 주어진다. (1 <= N <= 1000)
# 두 번째 줄에는 임스의 집에 있는 콜라의 개수 A와 맥주의 개수 B가 공백을 사이에 두고 주어진다. (1 <= A, B <= 1000, A, B는 정수)
# 출력
# 임스가 시켜먹을 수 있는 치킨의 총 개수를 출력하시오.

Chicken = int(input())
Cola, Beer = map(int,input().split())
print(min([Chicken, Cola//2 + Beer]))


# 25193 번
# 문제
# 곰곰이는 치킨을 좋아한다. 그러다 보니 매 끼니에 치킨을 먹고 있다. 당신은 곰곰이의 트레이너로서 곰곰이의 식단을 관리해주기로 했다.
# 곰곰이가 N일간 먹어야 할 음식들의 리스트가 주어졌을 때, 리스트의 순서를 원하는 대로 조정하여 곰곰이가 연속으로 치킨을 먹는 날의 최댓값을 가장 작게 만들려고 한다.
# 곰곰이의 건강을 위해 위와 같은 프로그램을 작성해 보자.
# 입력
# 첫 번째 줄에 식단을 정할 일수 N (1 <= N <= 100,000)이 주어진다.
# 두 번째 줄에 음식의 리스트인 길이 N의 문자열 S가 주어진다. 문자열은 영어 대문자로만 이루어져 있다. S_i가 C인 경우, i번째 음식이 치킨이며, 그 외의 경우에는 다른 음식이다.
# 출력
# 곰곰이가 연속으로 치킨을 먹는 날의 최댓값의 최솟값을 구하여라.

N = int(input())
diet_list = list(map(list,input().split()))[0]
C = diet_list.count("C")
O = len(diet_list) - C
if O == 0: # 다른 음식이 없을 때
    print(C)
elif C == 0: # 치킨이 없을 때
    print(0)
else: # 치킨과 다른 음식이 섞여 있을 때
    make = []
    for i in range(1, C//O+1):
        for j in range(i+1):
            if C == i * O + j: # 나눗셈 식을 활용해서 피제수 = 제수 * 몫 + 나머지 방식으로 풀이. 단 나머지가 몫과 같을 수 있음
                make.append(i)
    print(min(make))



# 1003 번
# 문제
# fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.
# fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
# fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
# 두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
# fibonacci(0)은 0을 출력하고, 0을 리턴한다.
# fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
# 첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
# fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.
# 1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
# 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.
# 각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.

# 풀이 1 - 시간 초과
def fibonacci(n, listing):
    if n == 0:
        listing.append(n)
        return 0, listing
    elif n == 1:
        listing.append(n)
        return 1, listing
    else:
        return fibonacci(n-1, listing) + fibonacci(n-2, listing)

for i in range(int(input())):
    count = []
    fibonacci(int(input()),count)
    print(count.count(0), count.count(1))

# 풀이 2 - 시간 초과
def fibonacci(n):
    if n == 0:
        f_list.append(0) # f_list 0 반환
        return 0
    elif n == 1:
        f_list.append(1) # f_list 1 반환
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

for i in range(int(input())):
    global f_list # global f_list 선언
    f_list = []
    fibonacci(int(input()))
    print(f_list.count(0), f_list.count(1)) # f_list 내 0, 1 카운트

# 풀이?
fib = [ # 강제로 fibonacci list 를 만들고 뽑아오는 법
    [1, 0],[0, 1],[1, 1],[1, 2],
    [2, 3],[3, 5],[5, 8],[8, 13],
    [13, 21],[21, 34],[34, 55],[55, 89],
    [89, 144],[144, 233],[233, 377],[377, 610],
    [610, 987],[987, 1597],[1597, 2584],[2584, 4181],
    [4181, 6765],[6765, 10946],[10946, 17711],[17711, 28657],
    [28657, 46368],[46368, 75025],[75025, 121393],[121393, 196418],
    [196418, 317811],[317811, 514229],[514229, 832040],[832040, 1346269],
    [1346269, 2178309],[2178309, 3524578],[3524578, 5702887],[5702887, 9227465],
    [9227465, 14930352],[14930352, 24157817],[24157817, 39088169],[39088169, 63245986],
    [63245986, 102334155],[102334155, 165580141]
]

for i in range(int(input())):
    a = fib[int(input())]
    print(a[0], a[1])

# 풀이 3
global fib
fib = [[0,0]] * 101 # 리스트 내에 자리를 먼저 만들어야 대입 가능
fib[0] = [1,0]
fib[1] = [0,1]

def fibonacci(n):
    for i in range(2,n+1):
        a = fib[i-1][0] + fib[i-2][0]
        b = fib[i-1][1] + fib[i-2][1]
        fib[i] = [a,b]
    return fib[n]

for i in range(int(input())):
    result = fibonacci(int(input()))
    print(result[0], result[1])


# 24900 번
# 문제
# 한별이를 출력하는 프로그램을 작성하시오.
# 출력
# 한별이를 아래 예제 출력과 같이 출력한다
print(f"""                                                           :8DDDDDDDDDDDDDD$.                                           
                                                      DDDNNN8~~~~~~~~~~=~7DNNDNDDDNNI                                   
                                                  ?NNDD=~=~~~~~~~~~~~~~~~~~=~~==~=INNDNN7                               
                                               +NDDI~~~~~~~~~~~~~~~~~~~~~~~=~~========~ODND+                            
                                            :NND~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~============7NDN                          
                                          $DD$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~==============~DNN                        
                                        $DD=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~=================NND                      
                                       ND7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~===================DD7                    
                                     ~DD=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=======================8DN.                  
                                    8DO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=========================DD                  
                                   8N~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~=======================DN                 
                                  NN::::::::~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~~=~~========================DDO               
                                 $D$:::::::::::::::~~~~DD~~~~~~~~~~~~~~~~~~=~~=========================DN.              
                                 D8:::::::::::::::::::DN=::~~~~~~~~~~~~~~~~=~~======================~~:~DN              
                                DN:::::::::::::::::::ONO::::::::::::::::::::~~~~~~~~~~~~:::::::::::::::::DN             
                               DN::::::::::::::::::::NN.:::::::::::::::::::::::::::DN::::::::::::::::::::$DO            
                               DD:::::::::::::::::::DNI:::::::::::::::::::::::::::::D=::::::::::::::::::::NN            
                              NN~~~~:::::$N?:::::::.NN::::::::::::::::::::::::::::::ND.:::::::::::::::::::+N8           
                              N7~~~~~~~~OD7::::::::~DD::::::::::::::::::::::::::::::~D$::::::::::::::::::::DN           
                             NN~~~~~~~~IDZ~~~~~::::DN~:::::::::::::::::::::::::::::::DN::::::::::::::::::::=N~          
                             DD~~~~~~~~NN~~~~~~~~~=NN::::::::::::::::::::::::::::::::DN:::::::::::::::~~====NN          
                            8D~~~~~~~~ND~~~~~~~~~~~ND~~~~~~~~:::::::::::::::::::::::::N7:::~~===============NN          
                            DD~~~~~~~ON+~~~~~~~~~~~ND~~~~~~~~~~~~~~~~~~~=+NZ==========NN====================~ND         
               :DD7   DNDD. N8~~~~~~~NN~~~~~~~~~~DDND~~~~~~~~~~~~~~~~~~~~ND~~=========DD=====================ND         
               N~:DDNNN .8NDN~~~~~~~$D=~~~~~~~~+ND.DD~~~~~~~~~~~~~~~~~~~=DD~~=========~D+====================DN         
              :D     .  ..~ND~~~~~~~NN~~~~~~~+NN$..ND~~~~~~~~~~~~~~~~~~~7N=~~=========~ND=======~============ON         
              NN       ...:N?~~~~~~~N=~~~~~NNNI.. .7D+~~~~~~~~~~~~~~~~~=8NN~~==========NN=======N============$N         
         N  ODN       ....DN~~~~~~~DD=8NNND$..     .DD~~~=~~~~~~~~~~~~~=NNDD=~=========8D~======NN===========~N$        
    N? =NN  ND      .....NND~~~~~~~DDNN:...        .ND=~DNN~~~~~~~~~~~~=DN.DN~=========?N+======NN============ND        
   $D? DN    DZ    ....ND8NN~~~~~~$D                .DD~NNDD~~~~~~~~~~~~D8..DN=========~DN======NN============DN        
   DN ~N~   NN    ..:~NN..NZ~~~~~~DN                  NNN8.ND~~~~NDN?~~~DZ...7DD=======~NN======NN============DN        
   ND DD    :DN.  ..ND$  .N?~~~~~=NNN                   . ..DDD$~N8OND8=N+   ..DDDZ~====NN======+D+===========ND        
   NO         DD  ZDN    8NO~~~~~~NNN..DDDNN7               ...NND...:DDD:     .:.NDND=~DD======~DO===========DN        
              DNDDN:.    DN~~~~~~=NNNN.ODNNNNDDNNO              ...     .         ...DNNNN=======ND===========DD        
       INDN7    DD.     .DD~~~~~=IDND:.:~.....?DNDNN.                        ...... ....$D=======ND===========ND        
       NN        ND.    8N=~~~~$ND::.:=~:.~=......=ND~                 .NNNNNNNNNNNNNNN.~N+======NN===========DN        
       $DD        DN:   DD~~~~7NO...~==.:~~:.....                      NNNND? ..::..7NZ.:N?======8D~==========ZN        
       DN?     ~D: DND.?D~~~~~DD....~:.~=~.......                            ....~=:.:~..ND======~N$==========~DO       
       ND    ..DD.  .DNDN=~~~~DI.......:.........                           ....=~..~~~..DN======~DD===========NN       
       DDD  :.:DD.  . DDI~~~~~ND................        .DNNNNNNNNNN7      ....=~:.:~~...NN=======ND===========?D~      
       8D. ...OD..    DD~~~~~~+ND ............          NN:~::::~~~8N      ........~~...:ND=======DN============NN      
       DDI:...ND     .D7~~~~~~~7NN ..........           ID8::::::::8D      .............:DN=======ON============NN      
        ~NNND.N=.   .NN~~~~~~~~~NDN8                       ~::::::~N8       .............DN========D=============NI     
               DDNNN.ND~~~~~~~~DD =DND                                       ............DN========N+~===========NN     
                   ~:N=~~~~~~~~DD   .DDDD                                       ........ NN========DD============8D     
                    8N~~~~~~~~~ND    . .7NDDD? .                                      .8DDN========NN=============D:    
                    DD~~~~~~~~~DND:         IDNNND$.                           .+DNNNNDNIDN========DD=============DD    
                    ND~~~~~~~~ZN 7DD .. .:DDNDDNNDNNNNDDNDND8$?===+$8DDNNNDDDDDN8I~DN====8N========NN=============NN    
                    DD~~~~~~~~8N   DD.  .NN~~~~.~~=DNDNO.:7ODDDDNNDD8DDDND=~~~ =~~~ON====8N========DN=============DN    
                    ND~~~~~~~~DN    ZDD  DN~~~ ~~~~~=.7DDD+.......8NNN==~~~~~ ~~~~~ONN$==DN========8N=============ON    
                    ND~8N~=~~~ZN      DDODN=~.~~~~~=.~~~~INDNNNNDNN~~~~~~~~:~~~~~~~DN~ND=DN========DD=========~ND=8N    
                    IN=NDDI~~~~D8       DNN::~~~~~.~~~~~=.~~ND~~ND~~~~~~~~.~~~~~~~~NN  NDNN====ND==ND~D?======DNN=ND    
                     DNNI8ND=~~DN:       ZN=~~~~~ ~~~~~.~~~~DD~=DD~~~~~~~ ~~~~~~~=.ND. . ND===DNDD=NDDNN=====8NZDDDN    
                      NND  IDNDNNN+       D+~~~:~~~~~~ ~~~~~DDNNN+~~~~~~~~~~~~~~:=?N7   .ND=~ND  DNNN~ID====ND7 NNN     
                       ID                 ND~~ ~~~~~:.~~~7DDN7IDNN==~~ ~~~~~~~~ ~~DN   .:N?DDDDD NND  8N~=DDD  ZNN      
                                          NN~:~~~~~ =7DDDD+8N  :N8DDZ.~~~~~~~~.~~~DD.   NDD+ . DN=     OND+             
                                          DND~~~=8DNDDZ=~~ ND   NN~INND~~~~~.~~~~ND .    .    ..IDD                     
                                         DDNNNDNNN+~~~~~~.7N.    ND~~~NDDI~ ~~~~=NNN             .DDI                   
                                        DN=~~~~.=~~~~~~ ~~DN     +N+~~~~+DNDD~~~NNNND.            ..ND                  
                                         DDI~~ ~~~~~~~ ~~~ND..  ..ND~~~~:~~~DNDNNNN+            ..7O8ND+                
                                          .DND=~~~~=::~~=NN.   . . 8D~~.~~~~~~=DN$ODNDNDNNNDNNNNND8+~..                 
                                             8DNNI=.~~~~=NDDNNNNDDNDNN.~~~~~IDDNDND7:.                                  
                                                ?DNNDD?~DD          ~NN~~=NDD$                                          
                                                     :DDD.            NNNN=                                           """)


# 24901 번
# 문제
# 이진수 게임은 술자리 게임으로, 순서대로 돌아가면서 이진수의 각 자리수를 말하는 게임이다.
# 첫 번째 사람이 0의 이진수 표현인 0을 말하고, 다음 사람은 1의 이진수 표현인 1을 말한다.
# 그 다음 사람은 2의 이진수 표현인 10의 첫 번째 자리를 말하고, 그 다음 사람이 두 번째 자리인 0을 말하는 식이다.
# 즉, 순서대로 말하는 숫자를 나열하면 0-1-1-0-1-1-1-0-0-... 이다.
# 정수가 입력되면 그 값까지의 이진수 게임 수열을 출력하는 프로그램을 작성하시오.
# 입력
# 정수 n이 입력된다. 이때 0 ≤ n ≤ 10이다.
# 출력
# 0부터 n까지의 이진수 게임 수열을 출력한다.
n = int(input())+1
binary_all = []
for i in range(n):
    binary=["0"]*4
    if i == 0:
        binary_all.append("0")
    else:
        if i//8 == 1:
            binary[0] = "1"
            i%=8
        if i//4 == 1:
            binary[1] = "1"
            i%=4
        if i//2 == 1:
            binary[2] = "1"
            i%=2
        binary[3] = str(i)
        while binary[0] == "0":
            binary.remove("0")
        binary_all.append("".join(binary))
print("".join(binary_all))




# 2558 번
# 문제
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 A, 둘째 줄에 B가 주어진다. (0 < A, B < 10)
# 출력
# 첫째 줄에 A+B를 출력한다.

A = int(input())
B = int(input())
print(A+B)


# 10039 번
# 문제
# 상현이가 가르치는 아이폰 앱 개발 수업의 수강생은 원섭, 세희, 상근, 숭, 강수이다.
# 어제 이 수업의 기말고사가 있었고, 상현이는 지금 학생들의 기말고사 시험지를 채점하고 있다.
# 기말고사 점수가 40점 이상인 학생들은 그 점수 그대로 자신의 성적이 된다.
# 하지만, 40점 미만인 학생들은 보충학습을 듣는 조건을 수락하면 40점을 받게 된다.
# 보충학습은 거부할 수 없기 때문에, 40점 미만인 학생들은 항상 40점을 받게 된다.
# 학생 5명의 점수가 주어졌을 때, 평균 점수를 구하는 프로그램을 작성하시오.
# 입력
# 입력은 총 5줄로 이루어져 있고, 원섭이의 점수, 세희의 점수, 상근이의 점수, 숭이의 점수, 강수의 점수가 순서대로 주어진다.
# 점수는 모두 0점 이상, 100점 이하인 5의 배수이다. 따라서, 평균 점수는 항상 정수이다.
# 출력
# 첫째 줄에 학생 5명의 평균 점수를 출력한다.

score = [0]*5
for _ in range(5):
    n = int(input())
    if n<40:
        n = 40
    score[_] = n
print(int(sum(score)/5))


# 2748 번
# 문제
# 피보나치 수는 0과 1로 시작한다.
# 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다.
# 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.
# 이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.
# n=17일때 까지 피보나치 수를 써보면 다음과 같다.
# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597
# n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 n이 주어진다. n은 90보다 작거나 같은 자연수이다.
# 출력
# 첫째 줄에 n번째 피보나치 수를 출력한다.

n = int(input())
if n in [0, 1]:
    print(n)
else:
    fib = [0]*(n+1)
    fib[0], fib[1] = 0, 1
    for i in range(2,n+1):
        fib[i] = fib[i-1] + fib[i-2]
    print(fib[i])


# 2475 번
# 문제
# 컴퓨터를 제조하는 회사인 KOI 전자에서는 제조하는 컴퓨터마다 6자리의 고유번호를 매긴다.
# 고유번호의 처음 5자리에는 00000부터 99999까지의 수 중 하나가 주어지며 6번째 자리에는 검증수가 들어간다.
# 검증수는 고유번호의 처음 5자리에 들어가는 5개의 숫자를 각각 제곱한 수의 합을 10으로 나눈 나머지이다.
# 예를 들어 고유번호의 처음 5자리의 숫자들이 04256이면,
# 각 숫자를 제곱한 수들의 합 0+16+4+25+36 = 81 을 10으로 나눈 나머지인 1이 검증수이다.
# 입력
# 첫째 줄에 고유번호의 처음 5자리의 숫자들이 빈칸을 사이에 두고 하나씩 주어진다.
# 출력
# 첫째 줄에 검증수를 출력한다.
a = list(map(int,input().split()))
sum = 0
for i in a:
    sum+=i**2
print(sum%10)


# 9461 번
# 문제
# 오른쪽 그림과 같이 삼각형이 나선 모양으로 놓여져 있다.
# 첫 삼각형은 정삼각형으로 변의 길이는 1이다.
# 그 다음에는 다음과 같은 과정으로 정삼각형을 계속 추가한다.
# 나선에서 가장 긴 변의 길이를 k라 했을 때, 그 변에 길이가 k인 정삼각형을 추가한다.
# 파도반 수열 P(N)은 나선에 있는 정삼각형의 변의 길이이다.
# P(1)부터 P(10)까지 첫 10개 숫자는 1, 1, 1, 2, 2, 3, 4, 5, 7, 9이다.
# N이 주어졌을 때, P(N)을 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. (1 ≤ N ≤ 100)
# 출력
# 각 테스트 케이스마다 P(N)을 출력한다.

for _ in range(int(input())):
    wave=[0]*100
    wave[0:2]=[1,1,1]
    n = int(input())
    if n in [1, 2, 3]:
        print(1)
    else:
        for i in range(4,n+1):
            wave[i-1] = wave[i-3]+wave[i-4]
        print(wave[n-1])


# 10953 번
# 문제
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
# 각 테스트 케이스는 한 줄로 이루어져 있으며, 각 줄에 A와 B가 주어진다.
# A와 B는 콤마(,)로 구분되어 있다. (0 < A, B < 10)
# 출력
# 각 테스트 케이스마다 A+B를 출력한다.

for _ in range(int(input())):
    a, b = map(int,input().split(","))
    print(a+b)


# 2163 번
# 문제
# 정화는 N×M 크기의 초콜릿을 하나 가지고 있다.
# 초콜릿은 금이 가 있는 모양을 하고 있으며, 그 금에 의해 N×M개의 조각으로 나눠질 수 있다.
# 초콜릿의 크기가 너무 크다고 생각한 그녀는 초콜릿을 친구들과 나눠 먹기로 했다.
# 이를 위해서 정화는 초콜릿을 계속 쪼개서 총 N×M개의 조각으로 쪼개려고 한다.
# 초콜릿을 쪼갤 때에는 초콜릿 조각을 하나 들고, 적당한 위치에서 초콜릿을 쪼갠다.
# 초콜릿을 쪼갤 때에는 금이 가 있는 위치에서만 쪼갤 수 있다.
# 이와 같이 초콜릿을 쪼개면 초콜릿은 두 개의 조각으로 나눠지게 된다.
# 이제 다시 이 중에서 초콜릿 조각을 하나 들고, 쪼개는 과정을 반복하면 된다.
# 초콜릿을 쪼개다보면 초콜릿이 녹을 수 있기 때문에, 정화는 가급적이면 초콜릿을 쪼개는 횟수를 최소로 하려 한다.
# 초콜릿의 크기가 주어졌을 때, 이를 1×1 크기의 초콜릿으로 쪼개기 위한 최소 쪼개기 횟수를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 두 정수 N, M(1 ≤ N, M ≤ 300)이 주어진다.
# 출력
# 첫째 줄에 답을 출력한다.

a, b = map(int,input().split())
print(a*b-1)


# 2217 번
# 문제
# N(1 ≤ N ≤ 100,000)개의 로프가 있다.
# 이 로프를 이용하여 이런 저런 물체를 들어올릴 수 있다.
# 각각의 로프는 그 굵기나 길이가 다르기 때문에 들 수 있는 물체의 중량이 서로 다를 수도 있다.
# 하지만 여러 개의 로프를 병렬로 연결하면 각각의 로프에 걸리는 중량을 나눌 수 있다.
# k개의 로프를 사용하여 중량이 w인 물체를 들어올릴 때, 각각의 로프에는 모두 고르게 w/k 만큼의 중량이 걸리게 된다.
# 각 로프들에 대한 정보가 주어졌을 때,
# 이 로프들을 이용하여 들어올릴 수 있는 물체의 최대 중량을 구해내는 프로그램을 작성하시오.
# 모든 로프를 사용해야 할 필요는 없으며, 임의로 몇 개의 로프를 골라서 사용해도 된다.
# 입력
# 첫째 줄에 정수 N이 주어진다. 다
# 음 N개의 줄에는 각 로프가 버틸 수 있는 최대 중량이 주어진다.
# 이 값은 10,000을 넘지 않는 자연수이다.
# 출력
# 첫째 줄에 답을 출력한다.

# 풀이 1 - 시간초과, 각 로프의 데이터를 받고, 버틸 수 있는 하중 * 로프 개수 의 리스트에서 최대값 출력
from sys import stdin
# input = stdin.readline
n = int(input())
rope = [0] * n
weight = [0] * n
for _ in range(n):
    rope[_] = int(input())
for i in range(n):
    weight[i] = len(rope)*min(rope)
    rope.remove(min(rope))
print(max(weight))

# 풀이 2 - 각 로프의 데이터를 받고 역순으로 나열. 하중 최대값을 비교하여 마지막 값 출력
from sys import stdin
# input = stdin.readline
n = int(input())
rope = [0] * n
for _ in range(n):
    rope[_] = int(input())
rope.sort()
rope.reverse()
a = rope[0]
for i in range(1,n):
    a = max(a, (i + 1) * rope[i])
print(a)


# 9987 번
# 문제
# 입력으로 포켓몬의 번호가 주어졌을 때, 그 포켓몬의 이름과 타입을 출력하는 프로그램을 작성하시오.
# 입력
# 입력으로 포켓몬의 번호가 주어진다. 포켓몬의 번호는 718을 넘지 않는 자연수이다.
# 출력
# 첫째 줄에 포켓몬의 이름을 출력한다. 둘째 줄에는 포켓몬의 타입을 공백으로 구분하여 출력한다.
# http://web.archive.org/web/20140301191716/http://pokemondb.net/pokedex/national

# pokemon index 만들기
import requests
from bs4 import BeautifulSoup as bs

url = "http://web.archive.org/web/20140301191716/http://pokemondb.net/pokedex/national"
result =requests.get(url)
soup = bs(result.text, 'html.parser')
pokemons = soup.find_all("span", {"class":"infocard-tall"})
pokemon = []
for i in pokemons:
    number = i.find("small")
    number = number.text
    name = i.find("a", {"class": "ent-name"})
    name = name.text
    type_ = i.find_all("a", {"class": "itype"})
    type__ = []
    for j in type_:
        type__.append(j.text)
    type__
    type = " ".join(type__)
    poke = {
        "number": number,
        "name": name,
        "type": type
    }
    pokemon.append(poke)
print(pokemon)

# 실행 코드
pokemon = [
    {'number': '#001', 'name': 'Bulbasaur', 'type': 'Grass Poison'},
    {'number': '#002', 'name': 'Ivysaur', 'type': 'Grass Poison'},
    {'number': '#003', 'name': 'Venusaur', 'type': 'Grass Poison'},
    {'number': '#004', 'name': 'Charmander', 'type': 'Fire'},
    {'number': '#005', 'name': 'Charmeleon', 'type': 'Fire'},
    {'number': '#006', 'name': 'Charizard', 'type': 'Fire Flying'},
    {'number': '#007', 'name': 'Squirtle', 'type': 'Water'},
    {'number': '#008', 'name': 'Wartortle', 'type': 'Water'},
    {'number': '#009', 'name': 'Blastoise', 'type': 'Water'},
    {'number': '#010', 'name': 'Caterpie', 'type': 'Bug'},
    {'number': '#011', 'name': 'Metapod', 'type': 'Bug'},
    {'number': '#012', 'name': 'Butterfree', 'type': 'Bug Flying'},
    {'number': '#013', 'name': 'Weedle', 'type': 'Bug Poison'},
    {'number': '#014', 'name': 'Kakuna', 'type': 'Bug Poison'},
    {'number': '#015', 'name': 'Beedrill', 'type': 'Bug Poison'},
    {'number': '#016', 'name': 'Pidgey', 'type': 'Normal Flying'},
    {'number': '#017', 'name': 'Pidgeotto', 'type': 'Normal Flying'},
    {'number': '#018', 'name': 'Pidgeot', 'type': 'Normal Flying'},
    {'number': '#019', 'name': 'Rattata', 'type': 'Normal'},
    {'number': '#020', 'name': 'Raticate', 'type': 'Normal'},
    {'number': '#021', 'name': 'Spearow', 'type': 'Normal Flying'},
    {'number': '#022', 'name': 'Fearow', 'type': 'Normal Flying'},
    {'number': '#023', 'name': 'Ekans', 'type': 'Poison'},
    {'number': '#024', 'name': 'Arbok', 'type': 'Poison'},
    {'number': '#025', 'name': 'Pikachu', 'type': 'Electric'},
    {'number': '#026', 'name': 'Raichu', 'type': 'Electric'},
    {'number': '#027', 'name': 'Sandshrew', 'type': 'Ground'},
    {'number': '#028', 'name': 'Sandslash', 'type': 'Ground'},
    {'number': '#029', 'name': 'Nidoran♀', 'type': 'Poison'},
    {'number': '#030', 'name': 'Nidorina', 'type': 'Poison'},
    {'number': '#031', 'name': 'Nidoqueen', 'type': 'Poison Ground'},
    {'number': '#032', 'name': 'Nidoran♂', 'type': 'Poison'},
    {'number': '#033', 'name': 'Nidorino', 'type': 'Poison'},
    {'number': '#034', 'name': 'Nidoking', 'type': 'Poison Ground'},
    {'number': '#035', 'name': 'Clefairy', 'type': 'Fairy'},
    {'number': '#036', 'name': 'Clefable', 'type': 'Fairy'},
    {'number': '#037', 'name': 'Vulpix', 'type': 'Fire'},
    {'number': '#038', 'name': 'Ninetales', 'type': 'Fire'},
    {'number': '#039', 'name': 'Jigglypuff', 'type': 'Normal Fairy'},
    {'number': '#040', 'name': 'Wigglytuff', 'type': 'Normal Fairy'},
    {'number': '#041', 'name': 'Zubat', 'type': 'Poison Flying'},
    {'number': '#042', 'name': 'Golbat', 'type': 'Poison Flying'},
    {'number': '#043', 'name': 'Oddish', 'type': 'Grass Poison'},
    {'number': '#044', 'name': 'Gloom', 'type': 'Grass Poison'},
    {'number': '#045', 'name': 'Vileplume', 'type': 'Grass Poison'},
    {'number': '#046', 'name': 'Paras', 'type': 'Bug Grass'},
    {'number': '#047', 'name': 'Parasect', 'type': 'Bug Grass'},
    {'number': '#048', 'name': 'Venonat', 'type': 'Bug Poison'},
    {'number': '#049', 'name': 'Venomoth', 'type': 'Bug Poison'},
    {'number': '#050', 'name': 'Diglett', 'type': 'Ground'},
    {'number': '#051', 'name': 'Dugtrio', 'type': 'Ground'},
    {'number': '#052', 'name': 'Meowth', 'type': 'Normal'},
    {'number': '#053', 'name': 'Persian', 'type': 'Normal'},
    {'number': '#054', 'name': 'Psyduck', 'type': 'Water'},
    {'number': '#055', 'name': 'Golduck', 'type': 'Water'},
    {'number': '#056', 'name': 'Mankey', 'type': 'Fighting'},
    {'number': '#057', 'name': 'Primeape', 'type': 'Fighting'},
    {'number': '#058', 'name': 'Growlithe', 'type': 'Fire'},
    {'number': '#059', 'name': 'Arcanine', 'type': 'Fire'},
    {'number': '#060', 'name': 'Poliwag', 'type': 'Water'},
    {'number': '#061', 'name': 'Poliwhirl', 'type': 'Water'},
    {'number': '#062', 'name': 'Poliwrath', 'type': 'Water Fighting'},
    {'number': '#063', 'name': 'Abra', 'type': 'Psychic'},
    {'number': '#064', 'name': 'Kadabra', 'type': 'Psychic'},
    {'number': '#065', 'name': 'Alakazam', 'type': 'Psychic'},
    {'number': '#066', 'name': 'Machop', 'type': 'Fighting'},
    {'number': '#067', 'name': 'Machoke', 'type': 'Fighting'},
    {'number': '#068', 'name': 'Machamp', 'type': 'Fighting'},
    {'number': '#069', 'name': 'Bellsprout', 'type': 'Grass Poison'},
    {'number': '#070', 'name': 'Weepinbell', 'type': 'Grass Poison'},
    {'number': '#071', 'name': 'Victreebel', 'type': 'Grass Poison'},
    {'number': '#072', 'name': 'Tentacool', 'type': 'Water Poison'},
    {'number': '#073', 'name': 'Tentacruel', 'type': 'Water Poison'},
    {'number': '#074', 'name': 'Geodude', 'type': 'Rock Ground'},
    {'number': '#075', 'name': 'Graveler', 'type': 'Rock Ground'},
    {'number': '#076', 'name': 'Golem', 'type': 'Rock Ground'},
    {'number': '#077', 'name': 'Ponyta', 'type': 'Fire'},
    {'number': '#078', 'name': 'Rapidash', 'type': 'Fire'},
    {'number': '#079', 'name': 'Slowpoke', 'type': 'Water Psychic'},
    {'number': '#080', 'name': 'Slowbro', 'type': 'Water Psychic'},
    {'number': '#081', 'name': 'Magnemite', 'type': 'Electric Steel'},
    {'number': '#082', 'name': 'Magneton', 'type': 'Electric Steel'},
    {'number': '#083', 'name': "Farfetch'd", 'type': 'Normal Flying'},
    {'number': '#084', 'name': 'Doduo', 'type': 'Normal Flying'},
    {'number': '#085', 'name': 'Dodrio', 'type': 'Normal Flying'},
    {'number': '#086', 'name': 'Seel', 'type': 'Water'},
    {'number': '#087', 'name': 'Dewgong', 'type': 'Water Ice'},
    {'number': '#088', 'name': 'Grimer', 'type': 'Poison'},
    {'number': '#089', 'name': 'Muk', 'type': 'Poison'},
    {'number': '#090', 'name': 'Shellder', 'type': 'Water'},
    {'number': '#091', 'name': 'Cloyster', 'type': 'Water Ice'},
    {'number': '#092', 'name': 'Gastly', 'type': 'Ghost Poison'},
    {'number': '#093', 'name': 'Haunter', 'type': 'Ghost Poison'},
    {'number': '#094', 'name': 'Gengar', 'type': 'Ghost Poison'},
    {'number': '#095', 'name': 'Onix', 'type': 'Rock Ground'},
    {'number': '#096', 'name': 'Drowzee', 'type': 'Psychic'},
    {'number': '#097', 'name': 'Hypno', 'type': 'Psychic'},
    {'number': '#098', 'name': 'Krabby', 'type': 'Water'},
    {'number': '#099', 'name': 'Kingler', 'type': 'Water'},
    {'number': '#100', 'name': 'Voltorb', 'type': 'Electric'},
    {'number': '#101', 'name': 'Electrode', 'type': 'Electric'},
    {'number': '#102', 'name': 'Exeggcute', 'type': 'Grass Psychic'},
    {'number': '#103', 'name': 'Exeggutor', 'type': 'Grass Psychic'},
    {'number': '#104', 'name': 'Cubone', 'type': 'Ground'},
    {'number': '#105', 'name': 'Marowak', 'type': 'Ground'},
    {'number': '#106', 'name': 'Hitmonlee', 'type': 'Fighting'},
    {'number': '#107', 'name': 'Hitmonchan', 'type': 'Fighting'},
    {'number': '#108', 'name': 'Lickitung', 'type': 'Normal'},
    {'number': '#109', 'name': 'Koffing', 'type': 'Poison'},
    {'number': '#110', 'name': 'Weezing', 'type': 'Poison'},
    {'number': '#111', 'name': 'Rhyhorn', 'type': 'Ground Rock'},
    {'number': '#112', 'name': 'Rhydon', 'type': 'Ground Rock'},
    {'number': '#113', 'name': 'Chansey', 'type': 'Normal'},
    {'number': '#114', 'name': 'Tangela', 'type': 'Grass'},
    {'number': '#115', 'name': 'Kangaskhan', 'type': 'Normal'},
    {'number': '#116', 'name': 'Horsea', 'type': 'Water'},
    {'number': '#117', 'name': 'Seadra', 'type': 'Water'},
    {'number': '#118', 'name': 'Goldeen', 'type': 'Water'},
    {'number': '#119', 'name': 'Seaking', 'type': 'Water'},
    {'number': '#120', 'name': 'Staryu', 'type': 'Water'},
    {'number': '#121', 'name': 'Starmie', 'type': 'Water Psychic'},
    {'number': '#122', 'name': 'Mr. Mime', 'type': 'Psychic Fairy'},
    {'number': '#123', 'name': 'Scyther', 'type': 'Bug Flying'},
    {'number': '#124', 'name': 'Jynx', 'type': 'Ice Psychic'},
    {'number': '#125', 'name': 'Electabuzz', 'type': 'Electric'},
    {'number': '#126', 'name': 'Magmar', 'type': 'Fire'},
    {'number': '#127', 'name': 'Pinsir', 'type': 'Bug'},
    {'number': '#128', 'name': 'Tauros', 'type': 'Normal'},
    {'number': '#129', 'name': 'Magikarp', 'type': 'Water'},
    {'number': '#130', 'name': 'Gyarados', 'type': 'Water Flying'},
    {'number': '#131', 'name': 'Lapras', 'type': 'Water Ice'},
    {'number': '#132', 'name': 'Ditto', 'type': 'Normal'},
    {'number': '#133', 'name': 'Eevee', 'type': 'Normal'},
    {'number': '#134', 'name': 'Vaporeon', 'type': 'Water'},
    {'number': '#135', 'name': 'Jolteon', 'type': 'Electric'},
    {'number': '#136', 'name': 'Flareon', 'type': 'Fire'},
    {'number': '#137', 'name': 'Porygon', 'type': 'Normal'},
    {'number': '#138', 'name': 'Omanyte', 'type': 'Rock Water'},
    {'number': '#139', 'name': 'Omastar', 'type': 'Rock Water'},
    {'number': '#140', 'name': 'Kabuto', 'type': 'Rock Water'},
    {'number': '#141', 'name': 'Kabutops', 'type': 'Rock Water'},
    {'number': '#142', 'name': 'Aerodactyl', 'type': 'Rock Flying'},
    {'number': '#143', 'name': 'Snorlax', 'type': 'Normal'},
    {'number': '#144', 'name': 'Articuno', 'type': 'Ice Flying'},
    {'number': '#145', 'name': 'Zapdos', 'type': 'Electric Flying'},
    {'number': '#146', 'name': 'Moltres', 'type': 'Fire Flying'},
    {'number': '#147', 'name': 'Dratini', 'type': 'Dragon'},
    {'number': '#148', 'name': 'Dragonair', 'type': 'Dragon'},
    {'number': '#149', 'name': 'Dragonite', 'type': 'Dragon Flying'},
    {'number': '#150', 'name': 'Mewtwo', 'type': 'Psychic'},
    {'number': '#151', 'name': 'Mew', 'type': 'Psychic'},
    {'number': '#152', 'name': 'Chikorita', 'type': 'Grass'},
    {'number': '#153', 'name': 'Bayleef', 'type': 'Grass'},
    {'number': '#154', 'name': 'Meganium', 'type': 'Grass'},
    {'number': '#155', 'name': 'Cyndaquil', 'type': 'Fire'},
    {'number': '#156', 'name': 'Quilava', 'type': 'Fire'},
    {'number': '#157', 'name': 'Typhlosion', 'type': 'Fire'},
    {'number': '#158', 'name': 'Totodile', 'type': 'Water'},
    {'number': '#159', 'name': 'Croconaw', 'type': 'Water'},
    {'number': '#160', 'name': 'Feraligatr', 'type': 'Water'},
    {'number': '#161', 'name': 'Sentret', 'type': 'Normal'},
    {'number': '#162', 'name': 'Furret', 'type': 'Normal'},
    {'number': '#163', 'name': 'Hoothoot', 'type': 'Normal Flying'},
    {'number': '#164', 'name': 'Noctowl', 'type': 'Normal Flying'},
    {'number': '#165', 'name': 'Ledyba', 'type': 'Bug Flying'},
    {'number': '#166', 'name': 'Ledian', 'type': 'Bug Flying'},
    {'number': '#167', 'name': 'Spinarak', 'type': 'Bug Poison'},
    {'number': '#168', 'name': 'Ariados', 'type': 'Bug Poison'},
    {'number': '#169', 'name': 'Crobat', 'type': 'Poison Flying'},
    {'number': '#170', 'name': 'Chinchou', 'type': 'Water Electric'},
    {'number': '#171', 'name': 'Lanturn', 'type': 'Water Electric'},
    {'number': '#172', 'name': 'Pichu', 'type': 'Electric'},
    {'number': '#173', 'name': 'Cleffa', 'type': 'Fairy'},
    {'number': '#174', 'name': 'Igglybuff', 'type': 'Normal Fairy'},
    {'number': '#175', 'name': 'Togepi', 'type': 'Fairy'},
    {'number': '#176', 'name': 'Togetic', 'type': 'Fairy Flying'},
    {'number': '#177', 'name': 'Natu', 'type': 'Psychic Flying'},
    {'number': '#178', 'name': 'Xatu', 'type': 'Psychic Flying'},
    {'number': '#179', 'name': 'Mareep', 'type': 'Electric'},
    {'number': '#180', 'name': 'Flaaffy', 'type': 'Electric'},
    {'number': '#181', 'name': 'Ampharos', 'type': 'Electric'},
    {'number': '#182', 'name': 'Bellossom', 'type': 'Grass'},
    {'number': '#183', 'name': 'Marill', 'type': 'Water Fairy'},
    {'number': '#184', 'name': 'Azumarill', 'type': 'Water Fairy'},
    {'number': '#185', 'name': 'Sudowoodo', 'type': 'Rock'},
    {'number': '#186', 'name': 'Politoed', 'type': 'Water'},
    {'number': '#187', 'name': 'Hoppip', 'type': 'Grass Flying'},
    {'number': '#188', 'name': 'Skiploom', 'type': 'Grass Flying'},
    {'number': '#189', 'name': 'Jumpluff', 'type': 'Grass Flying'},
    {'number': '#190', 'name': 'Aipom', 'type': 'Normal'},
    {'number': '#191', 'name': 'Sunkern', 'type': 'Grass'},
    {'number': '#192', 'name': 'Sunflora', 'type': 'Grass'},
    {'number': '#193', 'name': 'Yanma', 'type': 'Bug Flying'},
    {'number': '#194', 'name': 'Wooper', 'type': 'Water Ground'},
    {'number': '#195', 'name': 'Quagsire', 'type': 'Water Ground'},
    {'number': '#196', 'name': 'Espeon', 'type': 'Psychic'},
    {'number': '#197', 'name': 'Umbreon', 'type': 'Dark'},
    {'number': '#198', 'name': 'Murkrow', 'type': 'Dark Flying'},
    {'number': '#199', 'name': 'Slowking', 'type': 'Water Psychic'},
    {'number': '#200', 'name': 'Misdreavus', 'type': 'Ghost'},
    {'number': '#201', 'name': 'Unown', 'type': 'Psychic'},
    {'number': '#202', 'name': 'Wobbuffet', 'type': 'Psychic'},
    {'number': '#203', 'name': 'Girafarig', 'type': 'Normal Psychic'},
    {'number': '#204', 'name': 'Pineco', 'type': 'Bug'},
    {'number': '#205', 'name': 'Forretress', 'type': 'Bug Steel'},
    {'number': '#206', 'name': 'Dunsparce', 'type': 'Normal'},
    {'number': '#207', 'name': 'Gligar', 'type': 'Ground Flying'},
    {'number': '#208', 'name': 'Steelix', 'type': 'Steel Ground'},
    {'number': '#209', 'name': 'Snubbull', 'type': 'Fairy'},
    {'number': '#210', 'name': 'Granbull', 'type': 'Fairy'},
    {'number': '#211', 'name': 'Qwilfish', 'type': 'Water Poison'},
    {'number': '#212', 'name': 'Scizor', 'type': 'Bug Steel'},
    {'number': '#213', 'name': 'Shuckle', 'type': 'Bug Rock'},
    {'number': '#214', 'name': 'Heracross', 'type': 'Bug Fighting'},
    {'number': '#215', 'name': 'Sneasel', 'type': 'Dark Ice'},
    {'number': '#216', 'name': 'Teddiursa', 'type': 'Normal'},
    {'number': '#217', 'name': 'Ursaring', 'type': 'Normal'},
    {'number': '#218', 'name': 'Slugma', 'type': 'Fire'},
    {'number': '#219', 'name': 'Magcargo', 'type': 'Fire Rock'},
    {'number': '#220', 'name': 'Swinub', 'type': 'Ice Ground'},
    {'number': '#221', 'name': 'Piloswine', 'type': 'Ice Ground'},
    {'number': '#222', 'name': 'Corsola', 'type': 'Water Rock'},
    {'number': '#223', 'name': 'Remoraid', 'type': 'Water'},
    {'number': '#224', 'name': 'Octillery', 'type': 'Water'},
    {'number': '#225', 'name': 'Delibird', 'type': 'Ice Flying'},
    {'number': '#226', 'name': 'Mantine', 'type': 'Water Flying'},
    {'number': '#227', 'name': 'Skarmory', 'type': 'Steel Flying'},
    {'number': '#228', 'name': 'Houndour', 'type': 'Dark Fire'},
    {'number': '#229', 'name': 'Houndoom', 'type': 'Dark Fire'},
    {'number': '#230', 'name': 'Kingdra', 'type': 'Water Dragon'},
    {'number': '#231', 'name': 'Phanpy', 'type': 'Ground'},
{'number': '#232', 'name': 'Donphan', 'type': 'Ground'},
    {'number': '#233', 'name': 'Porygon2', 'type': 'Normal'},
{'number': '#234', 'name': 'Stantler', 'type': 'Normal'},
    {'number': '#235', 'name': 'Smeargle', 'type': 'Normal'},
{'number': '#236', 'name': 'Tyrogue', 'type': 'Fighting'},
    {'number': '#237', 'name': 'Hitmontop', 'type': 'Fighting'},
    {'number': '#238', 'name': 'Smoochum', 'type': 'Ice Psychic'},
    {'number': '#239', 'name': 'Elekid', 'type': 'Electric'},
{'number': '#240', 'name': 'Magby', 'type': 'Fire'},
    {'number': '#241', 'name': 'Miltank', 'type': 'Normal'},
{'number': '#242', 'name': 'Blissey', 'type': 'Normal'},
    {'number': '#243', 'name': 'Raikou', 'type': 'Electric'},
{'number': '#244', 'name': 'Entei', 'type': 'Fire'},
    {'number': '#245', 'name': 'Suicune', 'type': 'Water'},
    {'number': '#246', 'name': 'Larvitar', 'type': 'Rock Ground'},
    {'number': '#247', 'name': 'Pupitar', 'type': 'Rock Ground'},
    {'number': '#248', 'name': 'Tyranitar', 'type': 'Rock Dark'},
    {'number': '#249', 'name': 'Lugia', 'type': 'Psychic Flying'},
    {'number': '#250', 'name': 'Ho-oh', 'type': 'Fire Flying'},
    {'number': '#251', 'name': 'Celebi', 'type': 'Psychic Grass'},
    {'number': '#252', 'name': 'Treecko', 'type': 'Grass'},
{'number': '#253', 'name': 'Grovyle', 'type': 'Grass'},
    {'number': '#254', 'name': 'Sceptile', 'type': 'Grass'},
{'number': '#255', 'name': 'Torchic', 'type': 'Fire'},
    {'number': '#256', 'name': 'Combusken', 'type': 'Fire Fighting'},
    {'number': '#257', 'name': 'Blaziken', 'type': 'Fire Fighting'},
    {'number': '#258', 'name': 'Mudkip', 'type': 'Water'},
    {'number': '#259', 'name': 'Marshtomp', 'type': 'Water Ground'},
    {'number': '#260', 'name': 'Swampert', 'type': 'Water Ground'},
    {'number': '#261', 'name': 'Poochyena', 'type': 'Dark'},
{'number': '#262', 'name': 'Mightyena', 'type': 'Dark'},
    {'number': '#263', 'name': 'Zigzagoon', 'type': 'Normal'},
{'number': '#264', 'name': 'Linoone', 'type': 'Normal'},
    {'number': '#265', 'name': 'Wurmple', 'type': 'Bug'},
{'number': '#266', 'name': 'Silcoon', 'type': 'Bug'},
    {'number': '#267', 'name': 'Beautifly', 'type': 'Bug Flying'},
{'number': '#268', 'name': 'Cascoon', 'type': 'Bug'},
    {'number': '#269', 'name': 'Dustox', 'type': 'Bug Poison'},
    {'number': '#270', 'name': 'Lotad', 'type': 'Water Grass'},
    {'number': '#271', 'name': 'Lombre', 'type': 'Water Grass'},
    {'number': '#272', 'name': 'Ludicolo', 'type': 'Water Grass'},
    {'number': '#273', 'name': 'Seedot', 'type': 'Grass'},
{'number': '#274', 'name': 'Nuzleaf', 'type': 'Grass Dark'},
    {'number': '#275', 'name': 'Shiftry', 'type': 'Grass Dark'},
    {'number': '#276', 'name': 'Taillow', 'type': 'Normal Flying'},
    {'number': '#277', 'name': 'Swellow', 'type': 'Normal Flying'},
    {'number': '#278', 'name': 'Wingull', 'type': 'Water Flying'},
    {'number': '#279', 'name': 'Pelipper', 'type': 'Water Flying'},
    {'number': '#280', 'name': 'Ralts', 'type': 'Psychic Fairy'},
    {'number': '#281', 'name': 'Kirlia', 'type': 'Psychic Fairy'},
    {'number': '#282', 'name': 'Gardevoir', 'type': 'Psychic Fairy'},
    {'number': '#283', 'name': 'Surskit', 'type': 'Bug Water'},
    {'number': '#284', 'name': 'Masquerain', 'type': 'Bug Flying'},
    {'number': '#285', 'name': 'Shroomish', 'type': 'Grass'},
    {'number': '#286', 'name': 'Breloom', 'type': 'Grass Fighting'},
    {'number': '#287', 'name': 'Slakoth', 'type': 'Normal'},
{'number': '#288', 'name': 'Vigoroth', 'type': 'Normal'},
    {'number': '#289', 'name': 'Slaking', 'type': 'Normal'},
    {'number': '#290', 'name': 'Nincada', 'type': 'Bug Ground'},
    {'number': '#291', 'name': 'Ninjask', 'type': 'Bug Flying'},
    {'number': '#292', 'name': 'Shedinja', 'type': 'Bug Ghost'},
    {'number': '#293', 'name': 'Whismur', 'type': 'Normal'},
{'number': '#294', 'name': 'Loudred', 'type': 'Normal'},
    {'number': '#295', 'name': 'Exploud', 'type': 'Normal'},
{'number': '#296', 'name': 'Makuhita', 'type': 'Fighting'},
    {'number': '#297', 'name': 'Hariyama', 'type': 'Fighting'},
    {'number': '#298', 'name': 'Azurill', 'type': 'Normal Fairy'},
    {'number': '#299', 'name': 'Nosepass', 'type': 'Rock'},
{'number': '#300', 'name': 'Skitty', 'type': 'Normal'},
    {'number': '#301', 'name': 'Delcatty', 'type': 'Normal'},
    {'number': '#302', 'name': 'Sableye', 'type': 'Dark Ghost'},
    {'number': '#303', 'name': 'Mawile', 'type': 'Steel Fairy'},
    {'number': '#304', 'name': 'Aron', 'type': 'Steel Rock'},
    {'number': '#305', 'name': 'Lairon', 'type': 'Steel Rock'},
    {'number': '#306', 'name': 'Aggron', 'type': 'Steel Rock'},
    {'number': '#307', 'name': 'Meditite', 'type': 'Fighting Psychic'},
    {'number': '#308', 'name': 'Medicham', 'type': 'Fighting Psychic'},
    {'number': '#309', 'name': 'Electrike', 'type': 'Electric'},
    {'number': '#310', 'name': 'Manectric', 'type': 'Electric'},
    {'number': '#311', 'name': 'Plusle', 'type': 'Electric'},
{'number': '#312', 'name': 'Minun', 'type': 'Electric'},
    {'number': '#313', 'name': 'Volbeat', 'type': 'Bug'},
{'number': '#314', 'name': 'Illumise', 'type': 'Bug'},
    {'number': '#315', 'name': 'Roselia', 'type': 'Grass Poison'},
    {'number': '#316', 'name': 'Gulpin', 'type': 'Poison'},
{'number': '#317', 'name': 'Swalot', 'type': 'Poison'},
    {'number': '#318', 'name': 'Carvanha', 'type': 'Water Dark'},
    {'number': '#319', 'name': 'Sharpedo', 'type': 'Water Dark'},
    {'number': '#320', 'name': 'Wailmer', 'type': 'Water'},
{'number': '#321', 'name': 'Wailord', 'type': 'Water'},
    {'number': '#322', 'name': 'Numel', 'type': 'Fire Ground'},
    {'number': '#323', 'name': 'Camerupt', 'type': 'Fire Ground'},
    {'number': '#324', 'name': 'Torkoal', 'type': 'Fire'},
{'number': '#325', 'name': 'Spoink', 'type': 'Psychic'},
    {'number': '#326', 'name': 'Grumpig', 'type': 'Psychic'},
{'number': '#327', 'name': 'Spinda', 'type': 'Normal'},
    {'number': '#328', 'name': 'Trapinch', 'type': 'Ground'},
    {'number': '#329', 'name': 'Vibrava', 'type': 'Ground Dragon'},
    {'number': '#330', 'name': 'Flygon', 'type': 'Ground Dragon'},
    {'number': '#331', 'name': 'Cacnea', 'type': 'Grass'},
{'number': '#332', 'name': 'Cacturne', 'type': 'Grass Dark'},
    {'number': '#333', 'name': 'Swablu', 'type': 'Normal Flying'},
    {'number': '#334', 'name': 'Altaria', 'type': 'Dragon Flying'},
    {'number': '#335', 'name': 'Zangoose', 'type': 'Normal'},
{'number': '#336', 'name': 'Seviper', 'type': 'Poison'},
    {'number': '#337', 'name': 'Lunatone', 'type': 'Rock Psychic'},
    {'number': '#338', 'name': 'Solrock', 'type': 'Rock Psychic'},
    {'number': '#339', 'name': 'Barboach', 'type': 'Water Ground'},
    {'number': '#340', 'name': 'Whiscash', 'type': 'Water Ground'},
    {'number': '#341', 'name': 'Corphish', 'type': 'Water'},
    {'number': '#342', 'name': 'Crawdaunt', 'type': 'Water Dark'},
    {'number': '#343', 'name': 'Baltoy', 'type': 'Ground Psychic'},
    {'number': '#344', 'name': 'Claydol', 'type': 'Ground Psychic'},
    {'number': '#345', 'name': 'Lileep', 'type': 'Rock Grass'},
    {'number': '#346', 'name': 'Cradily', 'type': 'Rock Grass'},
    {'number': '#347', 'name': 'Anorith', 'type': 'Rock Bug'},
    {'number': '#348', 'name': 'Armaldo', 'type': 'Rock Bug'},
{'number': '#349', 'name': 'Feebas', 'type': 'Water'},
    {'number': '#350', 'name': 'Milotic', 'type': 'Water'},
{'number': '#351', 'name': 'Castform', 'type': 'Normal'},
    {'number': '#352', 'name': 'Kecleon', 'type': 'Normal'},
{'number': '#353', 'name': 'Shuppet', 'type': 'Ghost'},
    {'number': '#354', 'name': 'Banette', 'type': 'Ghost'},
{'number': '#355', 'name': 'Duskull', 'type': 'Ghost'},
    {'number': '#356', 'name': 'Dusclops', 'type': 'Ghost'},
    {'number': '#357', 'name': 'Tropius', 'type': 'Grass Flying'},
    {'number': '#358', 'name': 'Chimecho', 'type': 'Psychic'},
{'number': '#359', 'name': 'Absol', 'type': 'Dark'},
    {'number': '#360', 'name': 'Wynaut', 'type': 'Psychic'},
{'number': '#361', 'name': 'Snorunt', 'type': 'Ice'},
    {'number': '#362', 'name': 'Glalie', 'type': 'Ice'},
{'number': '#363', 'name': 'Spheal', 'type': 'Ice Water'},
    {'number': '#364', 'name': 'Sealeo', 'type': 'Ice Water'},
    {'number': '#365', 'name': 'Walrein', 'type': 'Ice Water'},
{'number': '#366', 'name': 'Clamperl', 'type': 'Water'},
    {'number': '#367', 'name': 'Huntail', 'type': 'Water'},
{'number': '#368', 'name': 'Gorebyss', 'type': 'Water'},
    {'number': '#369', 'name': 'Relicanth', 'type': 'Water Rock'},
    {'number': '#370', 'name': 'Luvdisc', 'type': 'Water'},
{'number': '#371', 'name': 'Bagon', 'type': 'Dragon'},
    {'number': '#372', 'name': 'Shelgon', 'type': 'Dragon'},
    {'number': '#373', 'name': 'Salamence', 'type': 'Dragon Flying'},
    {'number': '#374', 'name': 'Beldum', 'type': 'Steel Psychic'},
    {'number': '#375', 'name': 'Metang', 'type': 'Steel Psychic'},
    {'number': '#376', 'name': 'Metagross', 'type': 'Steel Psychic'},
    {'number': '#377', 'name': 'Regirock', 'type': 'Rock'},
{'number': '#378', 'name': 'Regice', 'type': 'Ice'},
    {'number': '#379', 'name': 'Registeel', 'type': 'Steel'},
    {'number': '#380', 'name': 'Latias', 'type': 'Dragon Psychic'},
    {'number': '#381', 'name': 'Latios', 'type': 'Dragon Psychic'},
    {'number': '#382', 'name': 'Kyogre', 'type': 'Water'},
{'number': '#383', 'name': 'Groudon', 'type': 'Ground'},
    {'number': '#384', 'name': 'Rayquaza', 'type': 'Dragon Flying'},
    {'number': '#385', 'name': 'Jirachi', 'type': 'Steel Psychic'},
    {'number': '#386', 'name': 'Deoxys', 'type': 'Psychic'},
{'number': '#387', 'name': 'Turtwig', 'type': 'Grass'},
    {'number': '#388', 'name': 'Grotle', 'type': 'Grass'},
    {'number': '#389', 'name': 'Torterra', 'type': 'Grass Ground'},
    {'number': '#390', 'name': 'Chimchar', 'type': 'Fire'},
    {'number': '#391', 'name': 'Monferno', 'type': 'Fire Fighting'},
    {'number': '#392', 'name': 'Infernape', 'type': 'Fire Fighting'},
    {'number': '#393', 'name': 'Piplup', 'type': 'Water'},
{'number': '#394', 'name': 'Prinplup', 'type': 'Water'},
    {'number': '#395', 'name': 'Empoleon', 'type': 'Water Steel'},
    {'number': '#396', 'name': 'Starly', 'type': 'Normal Flying'},
    {'number': '#397', 'name': 'Staravia', 'type': 'Normal Flying'},
    {'number': '#398', 'name': 'Staraptor', 'type': 'Normal Flying'},
    {'number': '#399', 'name': 'Bidoof', 'type': 'Normal'},
    {'number': '#400', 'name': 'Bibarel', 'type': 'Normal Water'},
    {'number': '#401', 'name': 'Kricketot', 'type': 'Bug'},
{'number': '#402', 'name': 'Kricketune', 'type': 'Bug'},
    {'number': '#403', 'name': 'Shinx', 'type': 'Electric'},
{'number': '#404', 'name': 'Luxio', 'type': 'Electric'},
    {'number': '#405', 'name': 'Luxray', 'type': 'Electric'},
    {'number': '#406', 'name': 'Budew', 'type': 'Grass Poison'},
    {'number': '#407', 'name': 'Roserade', 'type': 'Grass Poison'},
    {'number': '#408', 'name': 'Cranidos', 'type': 'Rock'},
{'number': '#409', 'name': 'Rampardos', 'type': 'Rock'},
    {'number': '#410', 'name': 'Shieldon', 'type': 'Rock Steel'},
    {'number': '#411', 'name': 'Bastiodon', 'type': 'Rock Steel'},
{'number': '#412', 'name': 'Burmy', 'type': 'Bug'},
    {'number': '#413', 'name': 'Wormadam', 'type': 'Bug Grass'},
    {'number': '#414', 'name': 'Mothim', 'type': 'Bug Flying'},
    {'number': '#415', 'name': 'Combee', 'type': 'Bug Flying'},
    {'number': '#416', 'name': 'Vespiquen', 'type': 'Bug Flying'},
    {'number': '#417', 'name': 'Pachirisu', 'type': 'Electric'},
{'number': '#418', 'name': 'Buizel', 'type': 'Water'},
    {'number': '#419', 'name': 'Floatzel', 'type': 'Water'},
{'number': '#420', 'name': 'Cherubi', 'type': 'Grass'},
    {'number': '#421', 'name': 'Cherrim', 'type': 'Grass'},
{'number': '#422', 'name': 'Shellos', 'type': 'Water'},
    {'number': '#423', 'name': 'Gastrodon', 'type': 'Water Ground'},
    {'number': '#424', 'name': 'Ambipom', 'type': 'Normal'},
    {'number': '#425', 'name': 'Drifloon', 'type': 'Ghost Flying'},
    {'number': '#426', 'name': 'Drifblim', 'type': 'Ghost Flying'},
    {'number': '#427', 'name': 'Buneary', 'type': 'Normal'},
{'number': '#428', 'name': 'Lopunny', 'type': 'Normal'},
    {'number': '#429', 'name': 'Mismagius', 'type': 'Ghost'},
    {'number': '#430', 'name': 'Honchkrow', 'type': 'Dark Flying'},
    {'number': '#431', 'name': 'Glameow', 'type': 'Normal'},
{'number': '#432', 'name': 'Purugly', 'type': 'Normal'},
    {'number': '#433', 'name': 'Chingling', 'type': 'Psychic'},
    {'number': '#434', 'name': 'Stunky', 'type': 'Poison Dark'},
    {'number': '#435', 'name': 'Skuntank', 'type': 'Poison Dark'},
    {'number': '#436', 'name': 'Bronzor', 'type': 'Steel Psychic'},
    {'number': '#437', 'name': 'Bronzong', 'type': 'Steel Psychic'},
    {'number': '#438', 'name': 'Bonsly', 'type': 'Rock'},
    {'number': '#439', 'name': 'Mime Jr.', 'type': 'Psychic Fairy'},
    {'number': '#440', 'name': 'Happiny', 'type': 'Normal'},
    {'number': '#441', 'name': 'Chatot', 'type': 'Normal Flying'},
    {'number': '#442', 'name': 'Spiritomb', 'type': 'Ghost Dark'},
    {'number': '#443', 'name': 'Gible', 'type': 'Dragon Ground'},
    {'number': '#444', 'name': 'Gabite', 'type': 'Dragon Ground'},
    {'number': '#445', 'name': 'Garchomp', 'type': 'Dragon Ground'},
    {'number': '#446', 'name': 'Munchlax', 'type': 'Normal'},
{'number': '#447', 'name': 'Riolu', 'type': 'Fighting'},
    {'number': '#448', 'name': 'Lucario', 'type': 'Fighting Steel'},
    {'number': '#449', 'name': 'Hippopotas', 'type': 'Ground'},
    {'number': '#450', 'name': 'Hippowdon', 'type': 'Ground'},
    {'number': '#451', 'name': 'Skorupi', 'type': 'Poison Bug'},
    {'number': '#452', 'name': 'Drapion', 'type': 'Poison Dark'},
    {'number': '#453', 'name': 'Croagunk', 'type': 'Poison Fighting'},
    {'number': '#454', 'name': 'Toxicroak', 'type': 'Poison Fighting'},
    {'number': '#455', 'name': 'Carnivine', 'type': 'Grass'},
{'number': '#456', 'name': 'Finneon', 'type': 'Water'},
    {'number': '#457', 'name': 'Lumineon', 'type': 'Water'},
    {'number': '#458', 'name': 'Mantyke', 'type': 'Water Flying'},
    {'number': '#459', 'name': 'Snover', 'type': 'Grass Ice'},
    {'number': '#460', 'name': 'Abomasnow', 'type': 'Grass Ice'},
    {'number': '#461', 'name': 'Weavile', 'type': 'Dark Ice'},
    {'number': '#462', 'name': 'Magnezone', 'type': 'Electric Steel'},
    {'number': '#463', 'name': 'Lickilicky', 'type': 'Normal'},
    {'number': '#464', 'name': 'Rhyperior', 'type': 'Ground Rock'},
    {'number': '#465', 'name': 'Tangrowth', 'type': 'Grass'},
    {'number': '#466', 'name': 'Electivire', 'type': 'Electric'},
    {'number': '#467', 'name': 'Magmortar', 'type': 'Fire'},
    {'number': '#468', 'name': 'Togekiss', 'type': 'Fairy Flying'},
    {'number': '#469', 'name': 'Yanmega', 'type': 'Bug Flying'},
{'number': '#470', 'name': 'Leafeon', 'type': 'Grass'},
    {'number': '#471', 'name': 'Glaceon', 'type': 'Ice'},
    {'number': '#472', 'name': 'Gliscor', 'type': 'Ground Flying'},
    {'number': '#473', 'name': 'Mamoswine', 'type': 'Ice Ground'},
    {'number': '#474', 'name': 'Porygon-Z', 'type': 'Normal'},
    {'number': '#475', 'name': 'Gallade', 'type': 'Psychic Fighting'},
    {'number': '#476', 'name': 'Probopass', 'type': 'Rock Steel'},
    {'number': '#477', 'name': 'Dusknoir', 'type': 'Ghost'},
    {'number': '#478', 'name': 'Froslass', 'type': 'Ice Ghost'},
    {'number': '#479', 'name': 'Rotom', 'type': 'Electric Ghost'},
    {'number': '#480', 'name': 'Uxie', 'type': 'Psychic'},
{'number': '#481', 'name': 'Mesprit', 'type': 'Psychic'},
    {'number': '#482', 'name': 'Azelf', 'type': 'Psychic'},
    {'number': '#483', 'name': 'Dialga', 'type': 'Steel Dragon'},
    {'number': '#484', 'name': 'Palkia', 'type': 'Water Dragon'},
    {'number': '#485', 'name': 'Heatran', 'type': 'Fire Steel'},
    {'number': '#486', 'name': 'Regigigas', 'type': 'Normal'},
    {'number': '#487', 'name': 'Giratina', 'type': 'Ghost Dragon'},
    {'number': '#488', 'name': 'Cresselia', 'type': 'Psychic'},
{'number': '#489', 'name': 'Phione', 'type': 'Water'},
    {'number': '#490', 'name': 'Manaphy', 'type': 'Water'},
{'number': '#491', 'name': 'Darkrai', 'type': 'Dark'},
    {'number': '#492', 'name': 'Shaymin', 'type': 'Grass'},
{'number': '#493', 'name': 'Arceus', 'type': 'Normal'},
    {'number': '#494', 'name': 'Victini', 'type': 'Psychic Fire'},
{'number': '#495', 'name': 'Snivy', 'type': 'Grass'},
    {'number': '#496', 'name': 'Servine', 'type': 'Grass'},
{'number': '#497', 'name': 'Serperior', 'type': 'Grass'},
    {'number': '#498', 'name': 'Tepig', 'type': 'Fire'},
{'number': '#499', 'name': 'Pignite', 'type': 'Fire Fighting'},
    {'number': '#500', 'name': 'Emboar', 'type': 'Fire Fighting'},
    {'number': '#501', 'name': 'Oshawott', 'type': 'Water'},
{'number': '#502', 'name': 'Dewott', 'type': 'Water'},
    {'number': '#503', 'name': 'Samurott', 'type': 'Water'},
{'number': '#504', 'name': 'Patrat', 'type': 'Normal'},
    {'number': '#505', 'name': 'Watchog', 'type': 'Normal'},
{'number': '#506', 'name': 'Lillipup', 'type': 'Normal'},
    {'number': '#507', 'name': 'Herdier', 'type': 'Normal'},
{'number': '#508', 'name': 'Stoutland', 'type': 'Normal'},
    {'number': '#509', 'name': 'Purrloin', 'type': 'Dark'},
{'number': '#510', 'name': 'Liepard', 'type': 'Dark'},
    {'number': '#511', 'name': 'Pansage', 'type': 'Grass'},
{'number': '#512', 'name': 'Simisage', 'type': 'Grass'},
    {'number': '#513', 'name': 'Pansear', 'type': 'Fire'},
{'number': '#514', 'name': 'Simisear', 'type': 'Fire'},
    {'number': '#515', 'name': 'Panpour', 'type': 'Water'},
{'number': '#516', 'name': 'Simipour', 'type': 'Water'},
    {'number': '#517', 'name': 'Munna', 'type': 'Psychic'},
{'number': '#518', 'name': 'Musharna', 'type': 'Psychic'},
    {'number': '#519', 'name': 'Pidove', 'type': 'Normal Flying'},
    {'number': '#520', 'name': 'Tranquill', 'type': 'Normal Flying'},
    {'number': '#521', 'name': 'Unfezant', 'type': 'Normal Flying'},
    {'number': '#522', 'name': 'Blitzle', 'type': 'Electric'},
    {'number': '#523', 'name': 'Zebstrika', 'type': 'Electric'},
    {'number': '#524', 'name': 'Roggenrola', 'type': 'Rock'},
{'number': '#525', 'name': 'Boldore', 'type': 'Rock'},
    {'number': '#526', 'name': 'Gigalith', 'type': 'Rock'},
    {'number': '#527', 'name': 'Woobat', 'type': 'Psychic Flying'},
    {'number': '#528', 'name': 'Swoobat', 'type': 'Psychic Flying'},
    {'number': '#529', 'name': 'Drilbur', 'type': 'Ground'},
    {'number': '#530', 'name': 'Excadrill', 'type': 'Ground Steel'},
    {'number': '#531', 'name': 'Audino', 'type': 'Normal'},
{'number': '#532', 'name': 'Timburr', 'type': 'Fighting'},
    {'number': '#533', 'name': 'Gurdurr', 'type': 'Fighting'},
    {'number': '#534', 'name': 'Conkeldurr', 'type': 'Fighting'},
    {'number': '#535', 'name': 'Tympole', 'type': 'Water'},
    {'number': '#536', 'name': 'Palpitoad', 'type': 'Water Ground'},
    {'number': '#537', 'name': 'Seismitoad', 'type': 'Water Ground'},
    {'number': '#538', 'name': 'Throh', 'type': 'Fighting'},
{'number': '#539', 'name': 'Sawk', 'type': 'Fighting'},
    {'number': '#540', 'name': 'Sewaddle', 'type': 'Bug Grass'},
    {'number': '#541', 'name': 'Swadloon', 'type': 'Bug Grass'},
    {'number': '#542', 'name': 'Leavanny', 'type': 'Bug Grass'},
    {'number': '#543', 'name': 'Venipede', 'type': 'Bug Poison'},
    {'number': '#544', 'name': 'Whirlipede', 'type': 'Bug Poison'},
    {'number': '#545', 'name': 'Scolipede', 'type': 'Bug Poison'},
    {'number': '#546', 'name': 'Cottonee', 'type': 'Grass Fairy'},
    {'number': '#547', 'name': 'Whimsicott', 'type': 'Grass Fairy'},
    {'number': '#548', 'name': 'Petilil', 'type': 'Grass'},
{'number': '#549', 'name': 'Lilligant', 'type': 'Grass'},
    {'number': '#550', 'name': 'Basculin', 'type': 'Water'},
    {'number': '#551', 'name': 'Sandile', 'type': 'Ground Dark'},
    {'number': '#552', 'name': 'Krokorok', 'type': 'Ground Dark'},
    {'number': '#553', 'name': 'Krookodile', 'type': 'Ground Dark'},
    {'number': '#554', 'name': 'Darumaka', 'type': 'Fire'},
{'number': '#555', 'name': 'Darmanitan', 'type': 'Fire'},
    {'number': '#556', 'name': 'Maractus', 'type': 'Grass'},
{'number': '#557', 'name': 'Dwebble', 'type': 'Bug Rock'},
    {'number': '#558', 'name': 'Crustle', 'type': 'Bug Rock'},
    {'number': '#559', 'name': 'Scraggy', 'type': 'Dark Fighting'},
    {'number': '#560', 'name': 'Scrafty', 'type': 'Dark Fighting'},
    {'number': '#561', 'name': 'Sigilyph', 'type': 'Psychic Flying'},
    {'number': '#562', 'name': 'Yamask', 'type': 'Ghost'},
{'number': '#563', 'name': 'Cofagrigus', 'type': 'Ghost'},
    {'number': '#564', 'name': 'Tirtouga', 'type': 'Water Rock'},
    {'number': '#565', 'name': 'Carracosta', 'type': 'Water Rock'},
    {'number': '#566', 'name': 'Archen', 'type': 'Rock Flying'},
    {'number': '#567', 'name': 'Archeops', 'type': 'Rock Flying'},
    {'number': '#568', 'name': 'Trubbish', 'type': 'Poison'},
{'number': '#569', 'name': 'Garbodor', 'type': 'Poison'},
    {'number': '#570', 'name': 'Zorua', 'type': 'Dark'},
{'number': '#571', 'name': 'Zoroark', 'type': 'Dark'},
    {'number': '#572', 'name': 'Minccino', 'type': 'Normal'},
{'number': '#573', 'name': 'Cinccino', 'type': 'Normal'},
    {'number': '#574', 'name': 'Gothita', 'type': 'Psychic'},
    {'number': '#575', 'name': 'Gothorita', 'type': 'Psychic'},
    {'number': '#576', 'name': 'Gothitelle', 'type': 'Psychic'},
    {'number': '#577', 'name': 'Solosis', 'type': 'Psychic'},
{'number': '#578', 'name': 'Duosion', 'type': 'Psychic'},
    {'number': '#579', 'name': 'Reuniclus', 'type': 'Psychic'},
    {'number': '#580', 'name': 'Ducklett', 'type': 'Water Flying'},
    {'number': '#581', 'name': 'Swanna', 'type': 'Water Flying'},
    {'number': '#582', 'name': 'Vanillite', 'type': 'Ice'},
{'number': '#583', 'name': 'Vanillish', 'type': 'Ice'},
    {'number': '#584', 'name': 'Vanilluxe', 'type': 'Ice'},
    {'number': '#585', 'name': 'Deerling', 'type': 'Normal Grass'},
    {'number': '#586', 'name': 'Sawsbuck', 'type': 'Normal Grass'},
    {'number': '#587', 'name': 'Emolga', 'type': 'Electric Flying'},
    {'number': '#588', 'name': 'Karrablast', 'type': 'Bug'},
    {'number': '#589', 'name': 'Escavalier', 'type': 'Bug Steel'},
    {'number': '#590', 'name': 'Foongus', 'type': 'Grass Poison'},
    {'number': '#591', 'name': 'Amoonguss', 'type': 'Grass Poison'},
    {'number': '#592', 'name': 'Frillish', 'type': 'Water Ghost'},
    {'number': '#593', 'name': 'Jellicent', 'type': 'Water Ghost'},
    {'number': '#594', 'name': 'Alomomola', 'type': 'Water'},
    {'number': '#595', 'name': 'Joltik', 'type': 'Bug Electric'},
    {'number': '#596', 'name': 'Galvantula', 'type': 'Bug Electric'},
    {'number': '#597', 'name': 'Ferroseed', 'type': 'Grass Steel'},
    {'number': '#598', 'name': 'Ferrothorn', 'type': 'Grass Steel'},
    {'number': '#599', 'name': 'Klink', 'type': 'Steel'},
{'number': '#600', 'name': 'Klang', 'type': 'Steel'},
    {'number': '#601', 'name': 'Klinklang', 'type': 'Steel'},
{'number': '#602', 'name': 'Tynamo', 'type': 'Electric'},
    {'number': '#603', 'name': 'Eelektrik', 'type': 'Electric'},
    {'number': '#604', 'name': 'Eelektross', 'type': 'Electric'},
    {'number': '#605', 'name': 'Elgyem', 'type': 'Psychic'},
{'number': '#606', 'name': 'Beheeyem', 'type': 'Psychic'},
    {'number': '#607', 'name': 'Litwick', 'type': 'Ghost Fire'},
    {'number': '#608', 'name': 'Lampent', 'type': 'Ghost Fire'},
    {'number': '#609', 'name': 'Chandelure', 'type': 'Ghost Fire'},
    {'number': '#610', 'name': 'Axew', 'type': 'Dragon'},
{'number': '#611', 'name': 'Fraxure', 'type': 'Dragon'},
    {'number': '#612', 'name': 'Haxorus', 'type': 'Dragon'},
{'number': '#613', 'name': 'Cubchoo', 'type': 'Ice'},
    {'number': '#614', 'name': 'Beartic', 'type': 'Ice'},
{'number': '#615', 'name': 'Cryogonal', 'type': 'Ice'},
    {'number': '#616', 'name': 'Shelmet', 'type': 'Bug'},
{'number': '#617', 'name': 'Accelgor', 'type': 'Bug'},
    {'number': '#618', 'name': 'Stunfisk', 'type': 'Electric Ground'},
    {'number': '#619', 'name': 'Mienfoo', 'type': 'Fighting'},
    {'number': '#620', 'name': 'Mienshao', 'type': 'Fighting'},
    {'number': '#621', 'name': 'Druddigon', 'type': 'Dragon'},
    {'number': '#622', 'name': 'Golett', 'type': 'Ground Ghost'},
    {'number': '#623', 'name': 'Golurk', 'type': 'Ground Ghost'},
    {'number': '#624', 'name': 'Pawniard', 'type': 'Dark Steel'},
    {'number': '#625', 'name': 'Bisharp', 'type': 'Dark Steel'},
    {'number': '#626', 'name': 'Bouffalant', 'type': 'Normal'},
    {'number': '#627', 'name': 'Rufflet', 'type': 'Normal Flying'},
    {'number': '#628', 'name': 'Braviary', 'type': 'Normal Flying'},
    {'number': '#629', 'name': 'Vullaby', 'type': 'Dark Flying'},
    {'number': '#630', 'name': 'Mandibuzz', 'type': 'Dark Flying'},
    {'number': '#631', 'name': 'Heatmor', 'type': 'Fire'},
{'number': '#632', 'name': 'Durant', 'type': 'Bug Steel'},
    {'number': '#633', 'name': 'Deino', 'type': 'Dark Dragon'},
    {'number': '#634', 'name': 'Zweilous', 'type': 'Dark Dragon'},
    {'number': '#635', 'name': 'Hydreigon', 'type': 'Dark Dragon'},
    {'number': '#636', 'name': 'Larvesta', 'type': 'Bug Fire'},
    {'number': '#637', 'name': 'Volcarona', 'type': 'Bug Fire'},
    {'number': '#638', 'name': 'Cobalion', 'type': 'Steel Fighting'},
    {'number': '#639', 'name': 'Terrakion', 'type': 'Rock Fighting'},
    {'number': '#640', 'name': 'Virizion', 'type': 'Grass Fighting'},
    {'number': '#641', 'name': 'Tornadus', 'type': 'Flying'},
    {'number': '#642', 'name': 'Thundurus', 'type': 'Electric Flying'},
    {'number': '#643', 'name': 'Reshiram', 'type': 'Dragon Fire'},
    {'number': '#644', 'name': 'Zekrom', 'type': 'Dragon Electric'},
    {'number': '#645', 'name': 'Landorus', 'type': 'Ground Flying'},
    {'number': '#646', 'name': 'Kyurem', 'type': 'Dragon Ice'},
    {'number': '#647', 'name': 'Keldeo', 'type': 'Water Fighting'},
    {'number': '#648', 'name': 'Meloetta', 'type': 'Normal Psychic'},
    {'number': '#649', 'name': 'Genesect', 'type': 'Bug Steel'},
{'number': '#650', 'name': 'Chespin', 'type': 'Grass'},
    {'number': '#651', 'name': 'Quilladin', 'type': 'Grass'},
    {'number': '#652', 'name': 'Chesnaught', 'type': 'Grass Fighting'},
    {'number': '#653', 'name': 'Fennekin', 'type': 'Fire'},
{'number': '#654', 'name': 'Braixen', 'type': 'Fire'},
    {'number': '#655', 'name': 'Delphox', 'type': 'Fire Psychic'},
    {'number': '#656', 'name': 'Froakie', 'type': 'Water'},
{'number': '#657', 'name': 'Frogadier', 'type': 'Water'},
    {'number': '#658', 'name': 'Greninja', 'type': 'Water Dark'},
    {'number': '#659', 'name': 'Bunnelby', 'type': 'Normal'},
    {'number': '#660', 'name': 'Diggersby', 'type': 'Normal Ground'},
    {'number': '#661', 'name': 'Fletchling', 'type': 'Normal Flying'},
    {'number': '#662', 'name': 'Fletchinder', 'type': 'Fire Flying'},
    {'number': '#663', 'name': 'Talonflame', 'type': 'Fire Flying'},
    {'number': '#664', 'name': 'Scatterbug', 'type': 'Bug'},
{'number': '#665', 'name': 'Spewpa', 'type': 'Bug'},
    {'number': '#666', 'name': 'Vivillon', 'type': 'Bug Flying'},
    {'number': '#667', 'name': 'Litleo', 'type': 'Fire Normal'},
    {'number': '#668', 'name': 'Pyroar', 'type': 'Fire Normal'},
{'number': '#669', 'name': 'Flabébé', 'type': 'Fairy'},
    {'number': '#670', 'name': 'Floette', 'type': 'Fairy'},
{'number': '#671', 'name': 'Florges', 'type': 'Fairy'},
    {'number': '#672', 'name': 'Skiddo', 'type': 'Grass'},
{'number': '#673', 'name': 'Gogoat', 'type': 'Grass'},
    {'number': '#674', 'name': 'Pancham', 'type': 'Fighting'},
    {'number': '#675', 'name': 'Pangoro', 'type': 'Fighting Dark'},
    {'number': '#676', 'name': 'Furfrou', 'type': 'Normal'},
{'number': '#677', 'name': 'Espurr', 'type': 'Psychic'},
    {'number': '#678', 'name': 'Meowstic', 'type': 'Psychic'},
    {'number': '#679', 'name': 'Honedge', 'type': 'Steel Ghost'},
    {'number': '#680', 'name': 'Doublade', 'type': 'Steel Ghost'},
    {'number': '#681', 'name': 'Aegislash', 'type': 'Steel Ghost'},
    {'number': '#682', 'name': 'Spritzee', 'type': 'Fairy'},
{'number': '#683', 'name': 'Aromatisse', 'type': 'Fairy'},
    {'number': '#684', 'name': 'Swirlix', 'type': 'Fairy'},
{'number': '#685', 'name': 'Slurpuff', 'type': 'Fairy'},
    {'number': '#686', 'name': 'Inkay', 'type': 'Dark Psychic'},
    {'number': '#687', 'name': 'Malamar', 'type': 'Dark Psychic'},
    {'number': '#688', 'name': 'Binacle', 'type': 'Rock Water'},
    {'number': '#689', 'name': 'Barbaracle', 'type': 'Rock Water'},
    {'number': '#690', 'name': 'Skrelp', 'type': 'Poison Water'},
    {'number': '#691', 'name': 'Dragalge', 'type': 'Poison Dragon'},
    {'number': '#692', 'name': 'Clauncher', 'type': 'Water'},
{'number': '#693', 'name': 'Clawitzer', 'type': 'Water'},
    {'number': '#694', 'name': 'Helioptile', 'type': 'Electric Normal'},
    {'number': '#695', 'name': 'Heliolisk', 'type': 'Electric Normal'},
    {'number': '#696', 'name': 'Tyrunt', 'type': 'Rock Dragon'},
    {'number': '#697', 'name': 'Tyrantrum', 'type': 'Rock Dragon'},
    {'number': '#698', 'name': 'Amaura', 'type': 'Rock Ice'},
{'number': '#699', 'name': 'Aurorus', 'type': 'Rock Ice'},
    {'number': '#700', 'name': 'Sylveon', 'type': 'Fairy'},
    {'number': '#701', 'name': 'Hawlucha', 'type': 'Fighting Flying'},
    {'number': '#702', 'name': 'Dedenne', 'type': 'Electric Fairy'},
    {'number': '#703', 'name': 'Carbink', 'type': 'Rock Fairy'},
{'number': '#704', 'name': 'Goomy', 'type': 'Dragon'},
    {'number': '#705', 'name': 'Sliggoo', 'type': 'Dragon'},
{'number': '#706', 'name': 'Goodra', 'type': 'Dragon'},
    {'number': '#707', 'name': 'Klefki', 'type': 'Steel Fairy'},
    {'number': '#708', 'name': 'Phantump', 'type': 'Ghost Grass'},
    {'number': '#709', 'name': 'Trevenant', 'type': 'Ghost Grass'},
    {'number': '#710', 'name': 'Pumpkaboo', 'type': 'Ghost Grass'},
    {'number': '#711', 'name': 'Gourgeist', 'type': 'Ghost Grass'},
    {'number': '#712', 'name': 'Bergmite', 'type': 'Ice'},
{'number': '#713', 'name': 'Avalugg', 'type': 'Ice'},
    {'number': '#714', 'name': 'Noibat', 'type': 'Flying Dragon'},
    {'number': '#715', 'name': 'Noivern', 'type': 'Flying Dragon'},
    {'number': '#716', 'name': 'Xerneas', 'type': 'Fairy'},
    {'number': '#717', 'name': 'Yveltal', 'type': 'Dark Flying'},
    {'number': '#718', 'name': 'Zygarde', 'type': 'Dragon Ground'}]
numb = int(input())-1
print(pokemon[numb]["name"])
print(pokemon[numb]["type"])

# 10828 번 - 완료
# 문제
# 정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
# 명령은 총 다섯 가지이다.
# push X: 정수 X를 스택에 넣는 연산이다.
# pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다.
# 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# size: 스택에 들어있는 정수의 개수를 출력한다.
# empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
# top: 스택의 가장 위에 있는 정수를 출력한다.
# 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# 입력
# 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다.
# 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다.
# 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다.
# 문제에 나와있지 않은 명령이 주어지는 경우는 없다.
# 출력
# 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

# 풀이 1
from sys import stdin
input = stdin.readline

global stk
stk = []

def func(a):
    # for _ in a:
    #   print(type(_))
    if "push" in a:
        stk.append(int(a[1]))
    elif "pop" in a:
        if len(stk) == 0:
            print(-1)
        else:
            print(stk[-1])
            return stk.pop(-1)
    elif "size" in a:
        return print(len(stk))
    elif "empty" in a:
        if len(stk) == 0:
            print(1)
        else:
            print(0)
    else:
        if len(stk) == 0:
            print(-1)
        else:
            print(stk[-1])

for _ in range(int(input())):
    func(list(map(str, input().split())))


# 2231 번 - 완료
# 문제
# 어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다.
# 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다.
# 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다.
# 따라서 245는 256의 생성자가 된다.
# 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다.
# 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.
# 자연수 N이 주어졌을 때, N의 가장 작은 생성자를 구해내는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 자연수 N(1 ≤ N ≤ 1,000,000)이 주어진다.
# 출력
# 첫째 줄에 답을 출력한다. 생성자가 없는 경우에는 0을 출력한다.

def separation(N):
  sep = [N]
  while N>=1:
    sep.append(N%10)
    N//=10
  return sum(sep)

N = int(input())
gen = [i for i in range(N-9*len(str(N)),N)]
sep = list(map(separation,gen))
if N in sep:
  print(gen[sep.index(N)])
else:
  print(0)


# 2798 번 - 완료
# 문제
# 카지노에서 제일 인기 있는 게임 블랙잭의 규칙은 상당히 쉽다.
# 카드의 합이 21을 넘지 않는 한도 내에서,
# 카드의 합을 최대한 크게 만드는 게임이다. 블랙잭은 카지노마다 다양한 규정이 있다.
# 한국 최고의 블랙잭 고수 김정인은 새로운 블랙잭 규칙을 만들어 상근, 창영이와 게임하려고 한다.
# 김정인 버전의 블랙잭에서 각 카드에는 양의 정수가 쓰여 있다.
# 그 다음, 딜러는 N장의 카드를 모두 숫자가 보이도록 바닥에 놓는다.
# 그런 후에 딜러는 숫자 M을 크게 외친다.
# 이제 플레이어는 제한된 시간 안에 N장의 카드 중에서 3장의 카드를 골라야 한다.
# 블랙잭 변형 게임이기 때문에,
# 플레이어가 고른 카드의 합은 M을 넘지 않으면서 M과 최대한 가깝게 만들어야 한다.
# N장의 카드에 써져 있는 숫자가 주어졌을 때,
# M을 넘지 않으면서 M에 최대한 가까운 카드 3장의 합을 구해 출력하시오.
# 입력
# 첫째 줄에 카드의 개수 N(3 ≤ N ≤ 100)과 M(10 ≤ M ≤ 300,000)이 주어진다.
# 둘째 줄에는 카드에 쓰여 있는 수가 주어지며, 이 값은 100,000을 넘지 않는 양의 정수이다.
# 합이 M을 넘지 않는 카드 3장을 찾을 수 있는 경우만 입력으로 주어진다.
# 출력
# 첫째 줄에 M을 넘지 않으면서 M에 최대한 가까운 카드 3장의 합을 출력한다.

from sys import stdin
input = stdin.readline

N, M = map(int,input().split())
cards = list(map(int,input().split()))
bj = []

for i in cards:
  # 파이썬 list는 =으로 복사할 경우 pointer가 두 개가 될 뿐 두 개의 list가 생성되지는 않음
  cards_j = cards.copy()
  cards_j.remove(i)
  for j in cards_j:
    cards_k = cards_j.copy()
    cards_k.remove(j)
    for k in cards_k:
      if i+j+k<=M:
        bj.append(i+j+k)

print(max(bj))

# 7568 번 - 완료
# 문제
# 우리는 사람의 덩치를 키와 몸무게, 이 두 개의 값으로 표현하여 그 등수를 매겨보려고 한다.
# 어떤 사람의 몸무게가 x kg이고 키가 y cm라면 이 사람의 덩치는 (x, y)로 표시된다.
# 두 사람 A 와 B의 덩치가 각각 (x, y), (p, q)라고 할 때
# x > p 그리고 y > q 이라면 우리는 A의 덩치가 B의 덩치보다 "더 크다"고 말한다.
# 예를 들어 어떤 A, B 두 사람의 덩치가 각각 (56, 177), (45, 165) 라고 한다면
# A의 덩치가 B보다 큰 셈이 된다.
# 그런데 서로 다른 덩치끼리 크기를 정할 수 없는 경우도 있다.
# 예를 들어 두 사람 C와 D의 덩치가 각각 (45, 181), (55, 173)이라면
# 몸무게는 D가 C보다 더 무겁고, 키는 C가 더 크므로,
# "덩치"로만 볼 때 C와 D는 누구도 상대방보다 더 크다고 말할 수 없다.
# N명의 집단에서 각 사람의 덩치 등수는 자신보다 더 "큰 덩치"의 사람의 수로 정해진다.
# 만일 자신보다 더 큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다.
# 이렇게 등수를 결정하면 같은 덩치 등수를 가진 사람은 여러 명도 가능하다.
# 아래는 5명으로 이루어진 집단에서 각 사람의 덩치와 그 등수가 표시된 표이다.
# 이름	(몸무게, 키)	덩치 등수
# A	(55, 185)	2
# B	(58, 183)	2
# C	(88, 186)	1
# D	(60, 175)	2
# E	(46, 155)	5
# 위 표에서 C보다 더 큰 덩치의 사람이 없으므로 C는 1등이 된다.
# 그리고 A, B, D 각각의 덩치보다 큰 사람은 C뿐이므로 이들은 모두 2등이 된다.
# 그리고 E보다 큰 덩치는 A, B, C, D 이렇게 4명이므로 E의 덩치는 5등이 된다.
# 위 경우에 3등과 4등은 존재하지 않는다.
# 여러분은 학생 N명의 몸무게와 키가 담긴 입력을 읽어서
# 각 사람의 덩치 등수를 계산하여 출력해야 한다.
# 입력
# 첫 줄에는 전체 사람의 수 N이 주어진다.
# 그리고 이어지는 N개의 줄에는
# 각 사람의 몸무게와 키를 나타내는 양의 정수 x와 y가 하나의 공백을 두고 각각 나타난다.
# 출력
# 여러분은 입력에 나열된 사람의 덩치 등수를 구해서 그 순서대로 첫 줄에 출력해야 한다.
# 단, 각 덩치 등수는 공백문자로 분리되어야 한다.

N = int(input())
big = [0] * N
index = [i for i in range(N)]
orders = [0] * N
order = 1

for _ in range(N):
    big[_] = list(map(int, input().split()))

for i in index:
    index_j = index.copy()
    index_j.remove(i)
    for j in index_j:
        if (big[i][0] < big[j][0]) and (big[i][1] < big[j][1]):
            orders[i] += 1

orders = list(map(lambda x: x + 1, orders))

print(*orders)

# 9020 번 - 완료
# 문제
# 1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다.
# 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다.
# 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.
# 골드바흐의 추측은 유명한 정수론의 미해결 문제로,
# 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다.
# 이러한 수를 골드바흐 수라고 한다.
# 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다.
# 예를 들면,
# 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5,
# 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다.
# 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.
# 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오.
# 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.
# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
# 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.
# 출력
# 각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다.
# 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.

from sys import stdin

input = stdin.readline


def prime(n):
    if n == 1:
        return 0
    else:
        m = int(n ** 0.5 + 1)
        for i in range(2, m):
            if n % i == 0:
                n = 0
                break
        return n


# Prime을 매 회차 진행하지 말고, 한 번 만든 다음에 더 이상 하지 않도록 설정
No = [i for i in range(10000 + 1)]
Prime = list(set(map(prime, No)))[1:]
Prime.sort()

for _ in range(int(input())):
    n = int(input())
    Goldbach = {}
    for i in Prime:
        # i 가 n/2보다 작으면 continue하고 그 이상일 경우에만 순서쌍 확인
        if i < n / 2:
            continue
        if n - i in Prime:
            Goldbach = {
                "1st": n - i,
                "2nd": i,
            }
            break
    print(Goldbach["1st"], Goldbach["2nd"])


# 1436 번
# 문제
# 666은 종말을 나타내는 숫자라고 한다.
# 따라서, 많은 블록버스터 영화에서는 666이 들어간 제목을 많이 사용한다.
# 영화감독 숌은 세상의 종말 이라는 시리즈 영화의 감독이다.
# 조지 루카스는 스타워즈를 만들 때,
# 스타워즈 1, 스타워즈 2, 스타워즈 3, 스타워즈 4, 스타워즈 5, 스타워즈 6과 같이 이름을 지었고,
# 피터 잭슨은 반지의 제왕을 만들 때,
# 반지의 제왕 1, 반지의 제왕 2, 반지의 제왕 3과 같이 영화 제목을 지었다.
# 하지만 숌은 자신이 조지 루카스와 피터 잭슨을 뛰어넘는다는 것을 보여주기 위해서
# 영화 제목을 좀 다르게 만들기로 했다.
# 종말의 숫자란 어떤 수에 6이 적어도 3개이상 연속으로 들어가는 수를 말한다.
# 제일 작은 종말의 숫자는 666이고, 그 다음으로 큰 수는 1666, 2666, 3666, .... 과 같다.
# 따라서, 숌은 첫 번째 영화의 제목은 세상의 종말 666,
# 두 번째 영화의 제목은 세상의 종말 1666 이렇게 이름을 지을 것이다.
# 일반화해서 생각하면, N번째 영화의 제목은 세상의 종말 (N번째로 작은 종말의 숫자) 와 같다.
# 숌이 만든 N번째 영화의 제목에 들어간 숫자를 출력하는 프로그램을 작성하시오.
# 숌은 이 시리즈를 항상 차례대로 만들고, 다른 영화는 만들지 않는다.
# 입력
# 첫째 줄에 숫자 N이 주어진다. N은 10,000보다 작거나 같은 자연수이다.
# 출력
# 첫째 줄에 N번째 영화의 제목에 들어간 수를 출력한다.

# 풀이 1
def six(n):
  if "666" in str(n):
    return n
  else:
    return

sixes = list(set(map(six, range(1,4000000))))
sixes.remove(None)
sixes.sort()
N=int(input())
print(sixes[N-1])


# 2751 번
# 문제
# N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000,000)이 주어진다.
# 둘째 줄부터 N개의 줄에는 수가 주어진다.
# 이 수는 절댓값이 1,000,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.
# 출력
# 첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.

# 풀이 1
from sys import stdin
input = stdin.readline

def merge(data): # 병합 정렬
    if len(data) <= 1:
        return

    cut = len(data) // 2
    left_data = data[:cut]
    right_data = data[cut:]

    merge(left_data)
    merge(right_data)
    # rawdata = [5,4,8,9,0,1,2,3,7,6] 일때
    # 1. left = 5, right = 4 // [4, 5]
    # 2. left = 9, right = 0 // [0, 9]
    # 3. left = 8, right = 0, 9 // [0, 8, 9]
    # 4. left = 4, 5, right = 0, 8, 9 // [0, 4, 5, 8, 9]
    # 5. left = 1, right= 2 // [1, 2]
    # 6. left = 7, right =6 // [6, 7]
    # 7. left = 3, right = 6, 7 // [3, 6, 7]
    # 8. left = 1, 2, right = 3, 6, 7 // [1, 2, 3, 6, 7]
    # 9. left= 0, 4, 5, 8, 9, right = 1, 2, 3, 6, 7 // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

    left = 0
    right = 0
    now = 0

    # 어느 한 쪽이 빈 데이터면 건너 뜀
    while left < len(left_data) and right < len(right_data):
        # 양 쪽 데이터 모두 빈 데이터가 아닐 때

        # left_data의 첫 번째 원소와 right_data의 첫 번째 원소를 비교
        if left_data[left] < right_data[right]:
            # right가 클 경우에
            # 원본 리스트의 첫 번째 자리에 left를 집어넣고 인덱스를 하나씩 이동
            data[now] = left_data[left]
            left += 1
            now += 1
        else:
            # left가 클 경우에
            # 원본 리스트의 첫 번째 자리에 right를 집어넣고 인덱스를 하나씩 이동
            data[now] = right_data[right]
            right += 1
            now += 1

    # 어느 한 쪽이 빈 데이터가 되었을 때
    # left의 데이터가 남아 있을 때 data에 모든 데이터를 덮어씀
    while left < len(left_data):
        data[now] = left_data[left]
        left += 1
        now += 1

    # 어느 한 쪽이 빈 데이터가 되었을 때
    # right의 데이터가 남아 있을 때 data에 모든 데이터를 덮어씀
    while right < len(right_data):
        data[now] = right_data[right]
        right += 1
        now += 1

# rawdata = []
# for _ in range(int(input())):
#     rawdata.append(int(input()))
rawdata = [5,4,8,9,0,1,2,3,7,6]
merge(rawdata)
for i in rawdata:
    print(i)

# 풀이 2 - python에는 sorted(list) 함수가 내장되어 있음
# rawdata = []
# for _ in range(int(input())):
#     rawdata.append(int(input()))
rawdata = [5,4,8,9,0,1,2,3,7,6]
for i in sorted(rawdata):
    print(i)


# 10989 번
# 문제
# N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 수의 개수 N(1 ≤ N ≤ 10,000,000)이 주어진다.
# 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 10,000보다 작거나 같은 자연수이다.
# 출력
# 첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.

# 풀이 1 - 메모리 초과, 모든 배열을 할당하면 메모리가 초과됨
from sys import stdin
input = stdin.readline

def counting(data): # 카운팅 정렬
    # data 정리를 위한 두 개의 list 생성
    # count list은 정렬하고자 하는 최대값의 크기 만큼 생성
    # result list은 정렬하고자 하는 데이터의 개수 크기 만큼 생성
    count = [0] * (max(data)+1)
    result = [0] * len(data)

    # count list에 정렬 데이터의 값을 index로 하여 위치 지정
    for da in data:
        count[da] += 1

    print(count)
    # count list의 값을 누적 적용
    for i in range(1,len(count)):
        count[i] += count[i-1]

    # 각 데이터마다 count list에서 index를 가져오고 원본 list에서 값을 가져와 result list에 입력
    for i in data:
        indexing = count[i]
        result[indexing - 1] = i
        # 중복 데이터 입력을 위해 필요함
        count[i] -= 1

    return result

rawdata = [1,7,6,43,435,42,3,4,6567,3,345,656]
# rawdata=[]
# for _ in range(int(input())):
#     rawdata.append(int(input()))
for i in counting(rawdata):
    print(i)

# 풀이 2 - 메모리 초과, dict형 변환도 아쉬운 듯
from sys import stdin
input = stdin.readline

def counting(data): # 카운팅 정렬
    # data 정리를 위한 두 개의 변수 생성
    # count 를 list가 아닌 dict 형으로 바꾸는 것이 메모리에서 이익일 것 같음
    count = {}
    result = []

    # count dict에 정렬 데이터의 값을 저장
    for da in data:
        try:
            count[da] += 1
        except:
            count[da]= 1

    # for 문으로 각 데이터의 index를 부여하고, count dict에서 개수를 가져와서 정렬
    for i in range(max(data)+1):
        while i in count and count[i] != 0:
            result.append(i)
            count[i] -= 1

    return result

rawdata = [1,2,2,1,5,6,3,4,3]
# rawdata=[]
# for _ in range(int(input())):
#     rawdata.append(int(input()))
for i in counting(rawdata):
    print(i)

# 풀이 3
from sys import stdin
input = stdin.readline

n = int(input())
# 입력받는 데이터는 1~10,000, 총 10,000,000 개의 데이터임
rawdata=[0] * (10000+1)

# 입력 받은 데이터를 index로 하여 데이터 입력
for _ in range(n):
    rawdata[int(input())] += 1

# 1~10,000에 대해서 데이터가 존재하면 출력
for i in range(1,10000+1):
    for j in range(rawdata[i]):
        print(i)








""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """
""" ######################################## 아래는 수정 필요 ######################################## """

# 4948 번 - 시간 초과
# 문제
# 베르트랑 공준은 임의의 자연수 n에 대하여, n보다 크고, 2n보다 작거나 같은 소수는 적어도 하나 존재한다는 내용을 담고 있다.
# 이 명제는 조제프 베르트랑이 1845년에 추측했고, 파프누티 체비쇼프가 1850년에 증명했다.
# 예를 들어, 10보다 크고, 20보다 작거나 같은 소수는 4개가 있다. (11, 13, 17, 19)
# 또, 14보다 크고, 28보다 작거나 같은 소수는 3개가 있다. (17,19, 23)
# 자연수 n이 주어졌을 때, n보다 크고, 2n보다 작거나 같은 소수의 개수를 구하는 프로그램을 작성하시오.
# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 케이스는 n을 포함하는 한 줄로 이루어져 있다.
# 입력의 마지막에는 0이 주어진다.
# 출력
# 각 테스트 케이스에 대해서, n보다 크고, 2n보다 작거나 같은 소수의 개수를 출력한다.
# 제한
# 1 ≤ n ≤ 123,456

# 풀이 1
def prime(n):
    if n == 1:
        return 0
    else:
        m = int(n**0.5+1)
        o = 1
        for i in range(2,m):
            if n % i == 0:
                o = 0
                break
        return o

while True:
    n=int(input())
    c=0
    if n==0:break
    if n==1:
        print(1)
        continue
    else:
        # 수정 전: number 의 원소가 범위 내의 모든 수
        # numbers = [i for i in range(n+1, 2*n+1)]
        # 수정 후: numbers 의 원소를 범위 내의 홀수로 제한
        numbers = [2 * i + 1 for i in range(int((n + 1) / 2), n)]
        # 수정 전: map 사용하여 list 생성
        # Prime = list(map(prime,numbers))
        # 수정 후: for 사용하여 list 생성
        Prime = []
        for i in numbers:
            Prime.append(prime(i))
    print(Prime.count(1))

# 2617 번
# 문제
# 모양은 같으나, 무게가 모두 다른 N개의 구슬이 있다. N은 홀수이며, 구슬에는 번호가 1,2,...,N으로 붙어 있다.
# 이 구슬 중에서 무게가 전체의 중간인 (무게 순서로 (N+1)/2번째) 구슬을 찾기 위해서 아래와 같은 일을 하려 한다.
# 우리에게 주어진 것은 양팔 저울이다. 한 쌍의 구슬을 골라서 양팔 저울의 양쪽에 하나씩 올려 보면 어느 쪽이 무거운가를 알 수 있다.
# 이렇게 M개의 쌍을 골라서 각각 양팔 저울에 올려서 어느 것이 무거운가를 모두 알아냈다.
# 이 결과를 이용하여 무게가 중간이 될 가능성이 전혀 없는 구슬들은 먼저 제외한다.
# 예를 들어, N=5이고, M=4 쌍의 구슬에 대해서 어느 쪽이 무거운가를 알아낸 결과가 아래에 있다.
# 구슬 2번이 구슬 1번보다 무겁다.
# 구슬 4번이 구슬 3번보다 무겁다.
# 구슬 5번이 구슬 1번보다 무겁다.
# 구슬 4번이 구슬 2번보다 무겁다.
# 위와 같이 네 개의 결과만을 알고 있으면, 무게가 중간인 구슬을 정확하게 찾을 수는 없지만,
# 1번 구슬과 4번 구슬은 무게가 중간인 구슬이 절대 될 수 없다는 것은 확실히 알 수 있다.
# 1번 구슬보다 무거운 것이 2, 4, 5번 구슬이고, 4번 보다 가벼운 것이 1, 2, 3번이다. 따라서 답은 2개이다.
# M 개의 쌍에 대한 결과를 보고 무게가 중간인 구슬이 될 수 없는 구슬의 개수를 구하는 프로그램을 작성하시오.
# 입력
# 첫 줄은 구슬의 개수를 나타내는 정수 N(1 ≤ N ≤ 99)과 저울에 올려 본 쌍의 개수 M(1 ≤ M ≤ N(N-1)/2)이 주어진다.
# 그 다음 M 개의 줄은 각 줄마다 두 개의 구슬 번호가 주어지는데, 앞 번호의 구슬이 뒤 번호의 구슬보다 무겁다는 것을 뜻한다.
# 출력
# 첫 줄에 무게가 중간이 절대로 될 수 없는 구슬의 수를 출력 한다.

N, M = map(int,input().split())
weight = [[0,0]] * N
for _ in range(M):
    a, b = map(int,input().split())
    i1 = weight[a-1][0] + 1
    i2 = weight[a-1][1]
    j1 = weight[b-1][0]
    j2 = weight[b-1][1] + 1
    weight[a-1] = [i1, i2]
    weight[b-1] = [j1, j2]
    print(f"[{i1}, {i2}], [{j1}, {j2}]")
    print(weight)
print(weight)


# 1759 번 - ?
# 문제
# 바로 어제 최백준 조교가 방 열쇠를 주머니에 넣은 채 깜빡하고 서울로 가 버리는 황당한 상황에 직면한 조교들은,
# 702호에 새로운 보안 시스템을 설치하기로 하였다.
# 이 보안 시스템은 열쇠가 아닌 암호로 동작하게 되어 있는 시스템이다.
# 암호는 서로 다른 L개의 알파벳 소문자들로 구성되며
# 최소 한 개의 모음(a, e, i, o, u)과 최소 두 개의 자음으로 구성되어 있다고 알려져 있다.
# 또한 정렬된 문자열을 선호하는 조교들의 성향으로 미루어 보아
# 암호를 이루는 알파벳이 암호에서 증가하는 순서로 배열되었을 것이라고 추측된다.
# 즉, abc는 가능성이 있는 암호이지만 bac는 그렇지 않다.
# 새 보안 시스템에서 조교들이 암호로 사용했을 법한 문자의 종류는 C가지가 있다고 한다.
# 이 알파벳을 입수한 민식, 영식 형제는 조교들의 방에 침투하기 위해 암호를 추측해 보려고 한다.
# C개의 문자들이 모두 주어졌을 때, 가능성 있는 암호들을 모두 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 두 정수 L, C가 주어진다. (3 ≤ L ≤ C ≤ 15)
# 다음 줄에는 C개의 문자들이 공백으로 구분되어 주어진다.
# 주어지는 문자들은 알파벳 소문자이며, 중복되는 것은 없다.
# 출력
# 각 줄에 하나씩, 사전식으로 가능성 있는 암호를 모두 출력한다.

L, C = map(int,input().split())
password = set(map(str,input().split()))
vowel = {"a", "e", "i", "o", "u"}
v_in_p = password.intersection(vowel)


# 25192 번 - 시간 초과
# 문제
# 알고리즘 입문방 오픈 채팅방에서는 새로운 분들이 입장을 할 때마다 곰곰티콘을 사용해 인사를 한다. 이를 본 문자열 킬러 임스는 채팅방의 기록을 수집해 그 중 곰곰티콘이 사용된 횟수를 구해 보기로 했다.
# ENTER는 새로운 사람이 채팅방에 입장했음을 나타낸다. 그 외는 채팅을 입력한 유저의 닉네임을 나타낸다. 닉네임은 숫자 또는 영문 대소문자로 구성되어 있다.
# 새로운 사람이 입장한 이후 처음 채팅을 입력하는 사람은 반드시 곰곰티콘으로 인사를 한다. 그 외의 기록은 곰곰티콘을 쓰지 않은 평범한 채팅 기록이다.
# 채팅 기록 중 곰곰티콘이 사용된 횟수를 구해보자!
# 입력
# 첫 번째 줄에는 채팅방의 기록 수를 나타내는 정수 N 이 주어진다. (1 <= N <= 100,000)
# 두 번째 줄부터 N 개의 줄에 걸쳐 새로운 사람의 입장을 나타내는 ENTER, 혹은 채팅을 입력한 유저의 닉네임이 문자열로 주어진다. (1 <= 문자열 길이 <= 20)
# 첫 번째 주어지는 문자열은 무조건 ENTER이다.
# 출력
# 채팅 기록 중 곰곰티콘이 사용된 횟수를 출력하시오.

# 풀이 1
count = 0 # 횟수 체크 변수 선언
for _ in range(int(input())):
    log = input()
    if log == "ENTER": # 채팅 로그가 "입장"이면 채팅 로그 리스트 초기화
        gomgom = []
    elif log not in gomgom: # 채팅 로그 리스트 내에 닉네임이 없을 경우 닉네임 삽입하고, 곰곰티콘 횟수 1회 증가
        gomgom.append(log)
        count += 1
print(count)


# 11653 번 - 시간 초과
# 문제
# 정수 N이 주어졌을 때, 소인수분해하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 정수 N (1 ≤ N ≤ 10,000,000)이 주어진다.
# 출력
# N의 소인수분해 결과를 한 줄에 하나씩 오름차순으로 출력한다. N이 1인 경우 아무것도 출력하지 않는다.

# 풀이 1 - 소수를 먼저 입력해 놓고 나누기, 시간 초과
primenumber = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
               101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
               211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,
               307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
               401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
               503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
               601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,
               701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
               809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
               907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
N = int(input())
while N>1:
    for i in primenumber:
        if N % i == 0:
            print(i)
            N /= i
            break

# 풀이 2 - N 이하의 소수를 구하고 소인수분해 하기, 시간 초과
def prime(n):
    if n == 1:
        return 0
    else:
        m = int(n**0.5+1)
        for i in range(2,m):
            if n % i == 0:
                n = 0
                break
        return n

N = int(input())
N_list = [i for i in range(N+1)]
M_list = list(set(map(prime,N_list)))
M_list.sort()
if 0 in M_list:
    M_list.remove(0)
while N>1:
    for i in M_list:
        if N % i == 0:
            print(i)
            N /= i
            break
        else:
            M_list.remove(i)

















# 10815 번 - 시간 초과
# 문제
# 숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다.
# 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.
# 셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다.
# 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다.
# 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다
# 출력
# 첫째 줄에 입력으로 주어진 M개의 수에 대해서, 각 수가 적힌 숫자 카드를 상근이가 가지고 있으면 1을, 아니면 0을 공백으로 구분해 출력한다.

# 시간 초과
from sys import stdin
N = int(stdin.readline())
N_list=list(map(int,stdin.readline().split()))
M = int(stdin.readline())
M_list=list(map(int,stdin.readline().split()))
C_list=[]
for i in M_list:
    if i in N_list:
        C_list.append(1)
    else:
        C_list.append(0)
print(C_list)

# 런타임 에러, 외부 lib 없음
from sys import stdin
import pandas as pd
N = int(stdin.readline())
N_df=pd.DataFrame(map(int,stdin.readline().split()),columns=["N"])
M = int(stdin.readline())
M_df=pd.DataFrame(map(int,stdin.readline().split()),columns=["M"])
Filter = M_df["M"].isin(N_df["N"])
M_df.loc[Filter, "M"] = 1
M_df.loc[-Filter, "M"] = 0
print(" ".join(list(M_df["M"])))


# 2004 번 - 시간 초과
# 문제
# binom{n}{m}의 끝자리 $0$의 개수를 출력하는 프로그램을 작성하시오
# 입력
# 첫째 줄에 정수 n, m (0 ≤ m ≤ n ≤ 2,000,000,000, n != 0 )이 들어온다.
# 출력
# 첫째 줄에 binom{n}{m}의 끝자리 0의 개수를 출력한다.

# 시간 초과
from math import factorial
n, m = map(int,input().split())
n_m = int(factorial(n)//(factorial(m)*factorial(n-m)))
count = 0
while n_m%10==0:
    n_m//=10
    count+=1
print(count)

# 시간 초과
from math import factorial
n, m = map(int,input().split())
n_m = list(str(int(factorial(n)//(factorial(m)*factorial(n-m)))))
n_m.reverse()
count = 0
for i in n_m:
    if i=="0":
        count+=1
    else:
        break
print(count)

# 시간 초과
from sys import stdin
from math import factorial
n, m = map(int,stdin.readline().split())
n_m = list(str(int(factorial(n)//(factorial(m)*factorial(n-m)))))
n_m.reverse()
count = 0
for i in n_m:
    if i=="0":
        count+=1
    else:
        break
print(count)

# 시간 초과
from math import factorial
n, m = map(int,input().split())
n_m = list(str(int(factorial(n)//(factorial(m)*factorial(n-m)))))
n_m.reverse()
count = len(n_m)
for i in range(1,10):
    count=min(0, n_m.index(i))
print(count)


# 10757 번 - C 언어 문제
# 문제
# 두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.
# 입력
# 첫째 줄에 A와 B가 주어진다. (0 < A,B < 10**10000)
# 출력
# 첫째 줄에 A+B를 출력한다.
import sys
a,b=map(int,sys.stdin.readline().split())
print(a+b)



"""
# 풀이 1 - 시간 초과
def fibonacci(n, listing):
    if n == 0:
        listing.append(n)
        return 0, listing
    elif n == 1:
        listing.append(n)
        return 1, listing
    else:
        return fibonacci(n-1, listing) + fibonacci(n-2, listing)

for i in range(int(input())):
    count = []
    fibonacci(int(input()),count)
    print(count.count(0), count.count(1))

# 풀이 2
def fibonacci(n):
    if n == 0:
        f_list.append(0)
        return 0
    elif n == 1:
        f_list.append(1)
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
global f_list
f_list = []
fibonacci(6)
print(f_list)
"""




"""
시간 측정 모델
from time import time
start = time()



print("#######end#######")
print(time()-start)
"""

"""
파이참 편집 기능
# 찾아서 바꾸기
편집할 부분을 블럭으로 씌운 다음에 Ctrl + R 로 특정 문자를 바꿈

# 위 아래 코드와 줄바꿈
해당 열에 커서를 놓고 Alt + Shift + 방향키

# 동일 위치 열 편집
Ctrl + Ctrl + 방향키

# 다중 커서 편집
Alt + 클릭
"""